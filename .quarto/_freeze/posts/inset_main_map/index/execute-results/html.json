{
  "hash": "f320229b5c6e0d2a9218b9ad017f4f5e",
  "result": {
    "markdown": "---\ntitle: \"Main and Inset maps with R\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/ \ndate: \"2023-02-20\"\ncategories: [Analysis, Visualization]\n# image: \"family.jpg\"\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nbibliography: ../blog.bib\nexecute: \n  warning: false\n---\n\n\n### Introduction {-}\n\nIn this post, We learn how we can make publication quality inset maps in R using `ggplot2` package [@ggplot]. When publishing scientific research in journals or presenting research work at a conference, showing maps of data collection sites or experimental locations is one of the key visualization elements. Maps of study sites or sampling locations can help the audience and readers to fathom the data in a better way. Mapping sounds fancy, but it needs substantial training and skill set to make high-quality maps that are reader-friendly and visually aesthetic.\n\nSometimes, the study sites are more dispersed and are easy to visualize in large geographic areas. However, in some cases, study sites are clustered, which makes it hard to show them on a broader scale. In that case, inset maps help us show the locations with reference to familiar geographical regions. An inset map is a smaller map featured on the same page as the main map. Traditionally, inset maps are shown at a larger scale (smaller area) than the main map. Often, an inset map is used as a locator map that shows the area of the main map in a broader, more familiar geographical frame of reference.\n\n### Spatial Vector Data Storage\nIf you have been using the vector data and doing spatial analysis, you know shapefile. Shapefile is the most commonly used vector data formats to store data and carry out any spatial analysis. \n\n### Characteristics of a shapefile {-}\nShapefiles are vector data storage models for storing feature classes composed of points, lines and polygons, but never a mixture. It stores information of the location, shape and attributes of geographical features. Each item in a shapefile has attributes that describe it composed of rows, called records and columns called fields and can also store multipart features, in which a single feature includes multiple objects which includes\n\n-   **.shp** file stores coordinate data\n-   **.dbf** file stores attribute data\n-   **.shx** file stores a spatial index that speeds drawing and analysis\n-   **.prj** file stores projection information\n-   **.avl** file stores legend\n-   **.xml** file contains metadata\n\n\n### Characteristics of a shapefile\n\n-   Takes up more storage space on your system\n-   Shapefiles have a minimum size of 2GB\n-   Do not support names in fields longer than 10 characters\n-   A shapefile cannot have more than one geometry type in a file.\n-   Cannot store data and time in the same field\n-   Do not support raster files\n-   Do not store NULL values in a field; when a value is NULL, a shapefile will use 0 instead.\n\nBut, shapefile has a lot of disadvantages when you wish to scale your work and build integrated & automated workflows for large-scale deployments. Geopackage format offers a variety of features in this regard. And that’s why you need to use Geopackage files instead of shapefile. Let’s dive deeper into the details.\n\n### Geopackage\nA Geopackage is platform-independent format for storing and transferring geospatial information. It is a SQLite based standard format designed for stand-alone databases that holds both raster data and multiple vector data layers in a single file and can be accessible by non-GIS software.\n\n### Characteristics of a Geopackage\n\n-   Geopackages are open source, SQLite based database\n-   No limitation on the file size and can handle large number of features\n-   Can store both raster as well as vector data layers\n-   A single Geopackage file can have multiple vector layers with each layer having a different geometry type.\n\n### Why choose Geopackages and not Shapefiles?\n\n1.  Shapefile is a multi-file format with minimum of 3 files and several other attached files with different extensions. Sharing a shapefile with someone would be complicated as all the other files attached will also have to be shared. Whereas, Geopackages includes all the information of the layer in a file and is easier to transfer or share.\n\n2.  Compared to shapefiles, the column headers in a geopackage can be full names and right by providing the correct context for each column. A shapefile can only have 10 characters to define the column header.\n\n3.  Geopackages run faster on algorithm outputs compared to shapefiles.\n\n4.  In a geopackage, there is no limit on the file size and can handle large number of features in a smaller file size. A shapefile can handle maximum size of 2 GB and cannot export a vector layer with more features.\n\n5.  A Geopackage stores both raster and vector files whereas, shapefiles can store only vector files.\n\n6.  Geopackages are lightweight and compatible across environments specially in mobile devices. It is 1.1-1.3x lighter in file size compared to shapefiles.\n\n\n### Load libraries\nSeveral packages in R are dealing with spatial data, but in this post we are going to use funtions from **tidyverse** [@tidyverse] and **sf** [@sf] packages. We can load these packages with a `library` function as as;\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\n```\n:::\n\n\n\n### Load file \n\nWe first need to import spatial data into the session. For this case we are going to load the boundary layer of Africa. The file has boundary for 67 polygons representing feature in Africa. We can load the file into the session using `st_read` function from **sf** package [@sf].\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica = st_read(\"../data/africa.gpkg\", quiet = TRUE)\n```\n:::\n\n\n\nNext I'll extract the polygon for WIO region countries from from the `Africa` package using the `filter` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwio = africa  |>  \n  filter(\n    country %in% c(\"Tanzania\", \"Kenya\", \"Mozambique\", \"South Africa\", \n                   \"Somalia\", \"Madagascar\", \"Seychelles\", \"Reunion\", \"Mauritius\"))\n\nwio.point.country = wio %>% wior::polygon_tb() %>% distinct(country, .keep_all = TRUE)\n```\n:::\n\n\nThen we load study points that were sampled off the coast of Madagascar. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampling.points = st_read(\"../data/madagascar_points.gpkg\", quiet = TRUE) %>% \n  filter(state == \"Ocean\")\n\nmadagascar = wio %>% filter(country == \"Madagascar\")\n```\n:::\n\n\n\n## Focus Map\n\nNow, I'll plot a focused map of Madagascar. We need to define the geographical extent of the area. For that purpose, we first need to identify the extent of the study sites and we can do that using `extent` function from **sf package;\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmadagascar %>% st_bbox()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     xmin      ymin      xmax      ymax \n 42.71862 -25.60895  50.48378 -11.94543 \n```\n:::\n:::\n\n\nThe printed results indicates tha maxima and minima of longitude and latitude, which define the geographical extent of the area. Using the `min` and `max` values of coordinates from the previous map, we can draw a polygon over the study sites and see if this extent can best visualize the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap.site = ggplot() +\n  ggspatial::layer_spatial(data = madagascar, fill = \"cyan4\", color = \"black\",size = .4)+\n  geom_sf(data = sampling.points, color = \"red\", size = 2)+\n  ggsci::scale_color_lancet()+\n  theme_bw(base_size = 12)+\n  theme(axis.title = element_blank())+\n  coord_sf(xlim = c(43, 51), ylim = c(-18,-11))\n\nmap.site\n```\n\n::: {.cell-output-display}\n![Sampling points in the coastal waters of Madagascar Island](index_files/figure-html/focus-1.png){width=576}\n:::\n:::\n\n\nAs you can see, the study sites are located on the northern part of Madagascar Island. However, to make a better sense of the study locations with reference to WIO region, we need to plot them on a focused scale. \n\n## Add Map elements\n\nProfessional maps also include some elements like `North Arrow` and `scale` etc. We'll add these components to our map as well. Besides that, I'll also fill the non-land area with `lightblue` color for reference and distinction respectively [@fig-focus1].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap.site = map.site +\n      guides(size = \"none\") +\n  ggspatial::annotation_north_arrow(location = \"tr\", \n                                    height = unit(1.2, \"cm\"),  \n                                    width = unit(.75, \"cm\"))+\n  ggspatial::annotation_scale(location = \"br\")\n\nmap.site\n```\n\n::: {.cell-output-display}\n![Sampling points in the coastal waters of Madagascar Island](index_files/figure-html/fig-focus1-1.png){#fig-focus1 fig-pos='H' width=576}\n:::\n:::\n\n\n## Inset Map\n\nNow, I'll create a full-scale map of WIO region with a red polygon showing the extent of study sites and the focused map. The code below produce [@fig-inset];\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninset.map = ggplot() +\n  ggspatial::layer_spatial(data = africa, fill = \"grey90\", color = \"grey90\") +\n  ggspatial::layer_spatial(data = wio, fill = \"grey60\", color = \"ivory\",size = .4)+\n  # geom_sf_text(data = wio, aes(label = country))+\n  ggrepel::geom_text_repel(data = wio.point.country, \n                           aes(x = lon, y = lat, label = country), size = 3)+\n  theme_bw(base_size = 12)+\n  theme(axis.title = element_blank())+\n  geom_rect(aes(xmin = 43, xmax = 51, ymin = -18, ymax = -11), \n            color = \"red\", fill = NA, size = 1.2)+\n  coord_sf(xlim = c(20, 60), ylim = c(-40,15))+\n  theme_test() + \n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.ticks.length = unit(0, \"pt\"),\n        axis.title=element_blank(),\n        plot.margin = margin(0, 0, 0, 0, \"cm\"),\n        panel.background = element_rect(fill = \"lightblue\"))\n\ninset.map\n```\n\n::: {.cell-output-display}\n![An inset map of the WIO region](index_files/figure-html/fig-inset-1.png){#fig-inset fig-pos='H' width=576}\n:::\n:::\n\n\nThis version looks better compared to the previous one. However, we need to add some information to give it a reference. \n\n\n## Final Map\n\nNow, to combine both maps where the map of WIO region is inset on the upper left corner we use the function from **cowplot** package. a `draw_plot` function allow to places a plot somewhere onto the drawing canvas that is established using `ggdraw` function also from **cowplot** package [@cowplot]. By default, coordinates run from 0 to 1, and the point (0, 0) is in the lower left corner of the canvas. The function also allows us to specify the size of the inset map using the `width` and `height` functions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncowplot::ggdraw(plot = map.site) +\n  cowplot::draw_plot(inset.map, x = .1, y = .13, width = .4, height = .5)\n```\n\n::: {.cell-output-display}\n![Map of the northwest side of Madagascar. An inset map indicate the location of the study area in the Western Indian Ocean region](index_files/figure-html/fig-map2-1.png){#fig-map2 width=576}\n:::\n:::\n\n\n\n### Summary\nTherefore , a final map shown in @fig-map2 shows the locations of study sites with reference to the country and provinces and is more professional.\n\n## Last updated {.appendix}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"16 February 2023\"\n```\n:::\n:::\n\n\n\n\n## Cited Materials\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}