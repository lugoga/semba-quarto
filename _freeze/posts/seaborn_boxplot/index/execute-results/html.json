{
  "hash": "a5420b743daa12bdfac9d84d281788f0",
  "result": {
    "markdown": "---\ntitle: \"plotting in Python with Seaborn: box plot\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/ \ndate: \"2023-02-24\"\ncategories: [Analysis, Visualization, Python]\nimage: \"boxplot.jpg\"\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nbibliography: ../blog.bib\nexecute: \n  warning: false\nfig-width: 7\nfig-height: 5\ncode-line-numbers: true\n\n---\n\n\n## Introduction\n\nIn [Visualization with Seaborn](https://lugoga.github.io/semba-quarto/posts/seabornVisualization/) of this series, we were introduced on the power visualization and dove into distributions plot. In this post we are going learn how to plot boxplot in seaborn. The boxplot is used to plot the quantile information of numeric variables in a dataset. To plot a box plot, the `boxplot()` function is used. To plot a horizontal boxplot, the variable name of the dataset is passed to the x-axis. \n\n\n## Loading libraries\n\nThough most people are familiar with plotting using matplot, as it inherited most of the functions from MatLab. Python has an extremely nady library for data visualiztion called seaborn. The Seaborn library is based on the Matplotlib library. Therefore, you will also need to import the Matplotlib library.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\nsns.set_theme()\n```\n:::\n\n\n## Dataset\n\nWe are going to use a penguin dataset from palmerpenguins package [@horst2022palmer]. We do not need to download this dataset as it comes with the seaborn package. We only need to load it from the package into our session using `sns.load_dataset` function and specify the `penguins` as the name of the dataset and assign it as df;\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = sns.load_dataset(\"penguins\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...         3750    male  2007\n1  Adelie  Torgersen            39.5  ...         3800  female  2007\n2  Adelie  Torgersen            40.3  ...         3250  female  2007\n3  Adelie  Torgersen             NaN  ...  -2147483648     NaN  2007\n4  Adelie  Torgersen            36.7  ...         3450  female  2007\n\n[5 rows x 8 columns]\n```\n:::\n:::\n\n\nA printed `df` dataset shows that is made up of various measurements of three different penguin species --- Adelie, Gentoo, and Chinstrap. The dataset contains seven variables -- species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, and year.\n\n\n## Boxplot\n\nNext, we will call the `boxplot()` function from the Seaborn library to plot a bar plot that displays the average length of penguin species.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = plt.figure()\nsns.boxplot(data=df, x=\"species\", y=\"bill_length_mm\")\nplt.ylabel(\"Bill length (mm)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Boxplot length by species](index_files/figure-html/fig-fig1-1.png){#fig-fig1 width=672}\n:::\n:::\n\n\nThe @fig-fig1 shows that the average length of penguins from the three island. We can parse an argument `hue = \"sex\"` to stack the plot as @fig-fig2 shows.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\nsns.boxplot(data=df, x=\"species\", y=\"bill_length_mm\", hue = \"sex\")\nplt.ylabel(\"Bill length (mm)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Boxplot of length by species and island](index_files/figure-html/fig-fig2-3.png){#fig-fig2 width=672}\n:::\n:::\n\nDraw a vertical boxplot with nested grouping by two variables:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\nsns.boxplot(data=df, y=\"species\", x=\"bill_length_mm\", hue = \"sex\")\nplt.xlabel(\"Bill length (mm)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Boxplot of length by species and island](index_files/figure-html/fig-fig3-5.png){#fig-fig3 width=672}\n:::\n:::\n\n## Violin\n\nViolin plots are similar to Box plots. However, unlike Box plots that plot quantile information, the Violin plots plot the overall distribution of values in the numeric columns. The following script plots two Violin plots for the passengers traveling alone and for the passengers traveling along with another passenger. The `violinplot()` function is used to plot a swarm plot with Seaborn.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\nsns.violinplot(data=df, x=\"species\", y=\"bill_length_mm\", hue = \"sex\")\nplt.ylabel(\"Bill length (mm)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Violin plot of length by species and island](index_files/figure-html/fig-fig4-7.png){#fig-fig4 width=672}\n:::\n:::\n\n\nWe can split the violin plot with `split = True` argument. One key advantage of splited violins is that take up less space (@fig-fig5):\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\nsns.violinplot(data=df, x=\"species\", y=\"bill_length_mm\", hue = \"sex\", \nsplit = True)\nplt.ylabel(\"Bill length (mm)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Violin plot of length by species and island](index_files/figure-html/fig-fig5-9.png){#fig-fig5 width=672}\n:::\n:::\n\n\n## Cited Materials\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}