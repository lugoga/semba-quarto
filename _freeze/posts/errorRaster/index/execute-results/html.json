{
  "hash": "39f12c9c0b17839b75164dd7776e756b",
  "result": {
    "markdown": "---\ntitle: \"How to handle irregular cell size error when creating Raster in R\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/ \ndate: \"2023-04-16\"\ndate-modified: \"2023-04-16\"\ncategories: [R, Modelling]\ntags: \n  - terra\n  - spatial analysis\n  - Data science\n  - MODIS\n  - Chlorophly\n  - Pemba Channel\n  - Masumbuko Semba\nimage: \"errorRaster.png\"\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nbibliography: ../blog.bib\ncsl:  ../elsevier.csl\nexecute: \n  warning: false\nfig-width: 7\nfig-height: 5\ncode-line-numbers: true\n---\n\n\nIn this blog post, I will discuss how to create a spatraster object from a data frame in R. This can be a useful tool for spatial analysis and visualization, as it allows you to work with raster data in R. To begin, I need to make sure I have the necessary packages installed. I will need the **magrittr**, **tidyverse**, **terra**,  and **sf**  packages, which can be loaded using the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(magrittr)\nrequire(terra)\nrequire(tidyterra)\nrequire(tidyverse)\nrequire(sf)\n```\n:::\n\n\n\nOnce I have these packages loaded, I can begin creating our spatRaster object. First, I need to create a data frame with our spatial data. This data frame should include columns for the x and y coordinates, as well as any additional variables  want to include in our raster. Instead of creating, I am going to download gridded file with **rerddap** package [@rerddap] and specified the geographical bound of the study area as the lines code code below shows;\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchl = rerddap::griddap(\n  x = \"erdMH1chla8day\",\n  longitude = c(38, 39.5),\n  latitude = c(-6.5,-5.0),\n  time = c(\"2022-01-01\", \"2022-01-31\"),\n  fmt = \"csv\") %>%\n    dplyr::as_tibble() %>%\n    dplyr::mutate(time = lubridate::as_date(time))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,845 x 4\n   time       latitude longitude chlorophyll\n   <date>        <dbl>     <dbl>       <dbl>\n 1 2021-12-31    -4.98      38.0         NaN\n 2 2021-12-31    -4.98      38.0         NaN\n 3 2021-12-31    -4.98      38.1         NaN\n 4 2021-12-31    -4.98      38.1         NaN\n 5 2021-12-31    -4.98      38.1         NaN\n 6 2021-12-31    -4.98      38.2         NaN\n 7 2021-12-31    -4.98      38.2         NaN\n 8 2021-12-31    -4.98      38.3         NaN\n 9 2021-12-31    -4.98      38.3         NaN\n10 2021-12-31    -4.98      38.4         NaN\n# ... with 6,835 more rows\n```\n:::\n:::\n\n\nOnce I have a dataframe, I use the `rast()` function to convert the xyz data frame to a spatRaster object. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchl %>% \n  filter(time == \"2021-12-31\") %>% \n  select(-time) %>% \n  terra::rast()\n```\n:::\n\n\nIt frustrate when seeing the error that suggests that the X cell sizes (i.e., the spatial resolution along the x-axis) in your XYZ file are not consistent, which is required to create a spatRaster Layer. Google or ask chatGPT offers a number of solutions on how to address this problem including interpolate the data. However, when interpolate, you change the grids and also the values. \n\nThat is a flaw especially when using remote sensing data, in which  ought to state the spatial resolution  have used. Recognizing that, I decided to take a long route that ensure that  can create a raster layer that is similar to the original dataset. Let's go along step by step on how I managed to overcome this hurdle \n\n1. compute the the minimum and maximum values of the longitude and latitude values. These values are required to define the geogrpahical extent of the spatRaster layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatRange = chl %>% \n  filter(time == \"2021-12-31\") %>% \n  select(-time) %$% \n  range(latitude)\n\nlonRange = chl %>% \n  filter(time == \"2021-12-31\") %>% \n  select(-time) %$% \n  range(longitude)\n```\n:::\n\n\n2. Then  need to maintain the spatial resoltuion--the grid size of each cell of the value in the raster. I downloaded an eight days mosaicked layer with a spatial resolution of about 4 kilometer. To maintain this resoltuion, I must first extract the unique longitude and latitude values and second is the length of each one. I did this by using `distict` and `pull` functions from **tidyverse** package [@tidyverse]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatLength = chl %>% \n  filter(time == \"2021-12-31\") %>% \n  distinct(latitude) %>% \n  pull(latitude) %>% \n  length()\n\nlonLength = chl %>% \n  filter(time == \"2021-12-31\") %>% \n  distinct(longitude) %>% \n  pull(longitude) %>% length()\n```\n:::\n\n\n3. As the raster is an xyz, so far  have dealt with longitude and latitude values which represent the x and y dimension.  I also need the z dimension, which is the chlorophyll-a value of the dataset  I simply downloaded. Unlike the longitude and latitude values, which  I computed the minimum and maximum values and the length of them, the z values should remain as raw.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzvalue = chl %>% \n  filter(time == \"2021-12-31\") %>% \n  pull(chlorophyll)\n```\n:::\n\n\n\n4. Once  I have the three dimensions of x, y and z values, now  I can create a matrix layer using `matrix` and specify the `nrow = lonLength` that define spacing of longitude and `ncol = latLength` that specify the latitude spacing. Once the matrix is created, then  I use a `rast` function from **terra** package to create spatRaster layer [@terra]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchl_rast = matrix(nrow = lonLength, ncol = latLength) %>% \n  terra::rast()\n\nchl_rast\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 37, 37, 1  (nrow, ncol, nlyr)\nresolution  : 1, 1  (x, y)\nextent      : 0, 37, 0, 37  (xmin, xmax, ymin, ymax)\ncoord. ref. :  \nsource(s)   : memory\nname        : lyr.1 \nmin value   :   NaN \nmax value   :   NaN \n```\n:::\n:::\n\n5. The printed output of the `chl_rast` shows medatata information and one of the variable is the spatial extent in the form `xmin`, `xmax`, `ymin`, `ymax`. However, that is the global spatial extent based on the `nrow` and `ncol` I specified while creating a matrix above. For the spatial extent to resemble those of our geographical area,  I need to specify them and  I can do that using the `ext` function from **terra**. I parsed the minimum and maximum values of the longitude and latitude from the `lonRange` and `latRange` objects, with values extracted before. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_ext = terra::ext(lonRange[1],lonRange[2],latRange[1], latRange[2])\n```\n:::\n\n\n6. Once the spatial extent are created, were used to change the global one into the local with `ext` function also from **terra** package [@terra].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nterra::ext(chl_rast) = new_ext\nchl_rast\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 37, 37, 1  (nrow, ncol, nlyr)\nresolution  : 0.04054054, 0.04054054  (x, y)\nextent      : 37.97917, 39.47917, -6.479169, -4.979169  (xmin, xmax, ymin, ymax)\ncoord. ref. :  \nsource(s)   : memory\nname        : lyr.1 \nmin value   :   NaN \nmax value   :   NaN \n```\n:::\n:::\n\n7. Notice now the spatial extent is within the geographical areas of the area of interest. I remain with one issue, the z values does not contain any values and that must also be added into the layer. with setValue function from **terra** package, I was able to add the chlorophyll-a that was extracted before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchl_rast = terra::setValues(x = chl_rast, values = zvalue)\n\nchl_rast\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 37, 37, 1  (nrow, ncol, nlyr)\nresolution  : 0.04054054, 0.04054054  (x, y)\nextent      : 37.97917, 39.47917, -6.479169, -4.979169  (xmin, xmax, ymin, ymax)\ncoord. ref. :  \nsource(s)   : memory\nname        :      lyr.1 \nmin value   : 0.09031657 \nmax value   : 2.96432110 \n```\n:::\n:::\n\n\nVoila! Now I have a raster layer with defined spatial extent that fit the local area and the chlorophyll values. But I am not sure whether the spatial resolution of 0.04054054 match the 4 kilometer from MODIS. You check that with simple mathematical multiplication. The universe rule of thumb is that one degree for areas close to the equator is equivalent to 110 kilometer and hence by multiplying the spatial resolution of 0.0405 with 110, I get an approximately 4.459 km spatial resolution, which is close to the stated one. \n\nFinally, I plot the spatRaster object using the `geom_spatraster()` function for continuous grids and `geom_spatraster_contour()` function for contour lines in **ggplot2** [@ggplot]. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_spatraster(data = chl_rast, maxcell = 2000)+\n  geom_spatraster_contour(data = chl_rast, breaks = .5)+\n  ggspatial::layer_spatial(tz, fill = \"#84837a\", color = \"black\", linewidth = .5)+\n  scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(), \n                       name = expression(Chl-a~(mg^{-3})))+\n  metR::scale_x_longitude(ticks = .3)+\n  metR::scale_y_latitude(ticks = .3) +\n coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+\n  theme_bw()+\n  theme(strip.background = element_rect(fill = \"white\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n## Cited sources\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}