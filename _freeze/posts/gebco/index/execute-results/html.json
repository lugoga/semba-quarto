{
  "hash": "00aef9b1b5878b02b7a207b56c948f82",
  "result": {
    "markdown": "---\ntitle: \"Getting GEBCO Bathymetry Data and glean the power of terra and tidyterra packages for raster and vector objects\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/ \ndate: \"2023-03-01\"\ncategories: [Manipulation,Visualization, R]\ntags: \n  - Bathymetry\n  - spatRaster\n  - terra\n  - tidyterra\n  - Masumbuko Semba\nimage: \"thumbnail.jpg\"\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nbibliography: ../blog.bib\nexecute: \n  warning: false\nfig-width: 7\nfig-height: 5\ncode-line-numbers: true\n---\n\n\n## Introduction\n\nAs an Oceanography, one key parameter that need to get right is the bathymetry. Bathymetry is the science of determining the topography of the seafloor. Bathymetry data is used to generate navigational charts, seafloor profile, biological oceanography, beach erosion, sea-level rise, etc. There pretty of bathymetry data and one of the them is the GEBCO Gridded Bathymetry Data. In this post we are going to learn how to access the bathymetry dataset from GEBCO website, import the dataset into R session and make plots to reveal the elevation and bathymetry of the Pemba Channel. In addtional, the post provide an glimpse of the new packages for handling raster dataset in R. The packages I am goint to introduce to you are *terra* and **tidyterra**, that have changed the way R handles raster and vector objet and improved both the processing of raster objects and visualization. \n\n\n## Dataset\nThe General bathymetric Chart of the Oceans (GEBCO) consists of an international group of experts in ocean mapping. This team provides the most authoritative publicly-available bathymetry of the world's oceans. In this post i will illustrate how to download data from their website and use for mapping. You can obtain the data for your region of interest or for the global oceans. You can download the data from [GEBCO](https://download.gebco.net/). For this case I have downloaded the data for East African Coast as netCDF file by specifying the geogrpahical extent and choose the file type as shown in @fig-gebco. \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The gateway screenshot for accessing bathymetric dataset for any region in the world](gebco.jpg){#fig-gebco width=100%}\n:::\n:::\n\n\n\nTo process the data and visualize in maps, we need several packages highlighted in the chunk below. You need to load the packages in your session first. If not in your machine, you need to install them first. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyverse)\nrequire(ncdf4)\nrequire(sf)\nrequire(metR)\n```\n:::\n\n\nThen read the file using `nc_open` function of the **ncdf4** package [@ncdf4] and print the file to see the metadata that describe the variables that are embedded in the file. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnc = nc_open(\"d:/gebco_tz.nc\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFile d:/semba/shapefile/gebco/gebco_2021_n2.0_s-15.0_w35.0_e50.0.nc (NC_FORMAT_CLASSIC):\n\n     1 variables (excluding dimension variables):\n        short elevation[lon,lat]   \n            standard_name: height_above_mean_sea_level\n            long_name: Elevation relative to sea level\n            units: m\n            grid_mapping: crs\n            sdn_parameter_urn: SDN:P01::ALATZZ01\n            sdn_parameter_name: Sea floor height (above mean sea level) {bathymetric height}\n            sdn_uom_urn: SDN:P06::ULAA\n            sdn_uom_name: Metres\n\n     2 dimensions:\n        lat  Size:4080 \n            standard_name: latitude\n            long_name: latitude\n            units: degrees_north\n            axis: Y\n            sdn_parameter_urn: SDN:P01::ALATZZ01\n            sdn_parameter_name: Latitude north\n            sdn_uom_urn: SDN:P06::DEGN\n            sdn_uom_name: Degrees north\n        lon  Size:3600 \n            standard_name: longitude\n            long_name: longitude\n            units: degrees_east\n            axis: X\n            sdn_parameter_urn: SDN:P01::ALONZZ01\n            sdn_parameter_name: Longitude east\n            sdn_uom_urn: SDN:P06::DEGE\n            sdn_uom_name: Degrees east\n\n    36 global attributes:\n        title: The GEBCO_2021 Grid - a continuous terrain model for oceans and land at 15 arc-second intervals\n        summary: The GEBCO_2021 Grid is a continuous, global terrain model for ocean and land with a spatial resolution of 15 arc seconds.The grid uses as a 'base-map' Version 2.2 of the SRTM15+ data set (Tozer et al, 2019). This data set is a fusion of land topography with measured and estimated seafloor topography. It is augmented with gridded bathymetric data sets developed as part of the Nippon Foundation-GEBCO Seabed 2030 Project.\n        keywords: BATHYMETRY/SEAFLOOR TOPOGRAPHY, DIGITAL ELEVATION/DIGITAL TERRAIN MODELS\n        Conventions: CF-1.6, ACDD-1.3\n        id: DOI: 10.5285/c6612cbe-50b3-0cff-e053-6c86abc09f8f\n        naming_authority: https://dx.doi.org\n        history: Information on the development of the data set and the source data sets included in the grid can be found in the data set documentation available from https://www.gebco.net\n        source: The GEBCO_2021 Grid is the latest global bathymetric product released by the General Bathymetric Chart of the Oceans (GEBCO) and has been developed through the Nippon Foundation-GEBCO Seabed 2030 Project. This is a collaborative project between the Nippon Foundation of Japan and GEBCO. The Seabed 2030 Project aims to bring together all available bathymetric data to produce the definitive map of the world ocean floor and make it available to all.\n        comment: The data in the GEBCO_2021 Grid should not be used for navigation or any purpose relating to safety at sea.\n        license: The GEBCO Grid is placed in the public domain and may be used free of charge. Use of the GEBCO Grid indicates that the user accepts the conditions of use and disclaimer information: https://www.gebco.net/data_and_products/gridded_bathymetry_data/gebco_2019/grid_terms_of_use.html\n        date_created: 2021-07-01\n        creator_name: GEBCO through the Nippon Foundation-GEBCO Seabed 2030 Project\n        creator_email: gdacc@seabed2030.org\n        creator_url: https://www.gebco.net\n        institution: On behalf of the General Bathymetric Chart of the Oceans (GEBCO), the data are held at the British Oceanographic Data Centre (BODC).\n        project: Nippon Foundation - GEBCO Seabed2030 Project\n        creator_type: International organisation\n        geospatial_bounds: -180\n         geospatial_bounds: -90\n         geospatial_bounds: 180\n         geospatial_bounds: 90\n        geospatial_bounds_crs: WGS84\n        geospatial_bounds_vertical_crs: EPSG:5831\n        geospatial_lat_min: -90\n        geospatial_lat_max: 90\n        geospatial_lat_units: degrees_north\n        geospatial_lat_resolution: 0.00416666666666667\n        geospatial_lon_min: -180\n        geospatial_lon_max: 180\n        geospatial_lon_units: degrees_east\n        geospatial_lon_resolution: 0.00416666666666667\n        geospatial_vertical_min: -10977\n        geospatial_vertical_max: 8685\n        geospatial_vertical_units: meters\n        geospatial_vertical_resolution: 1\n        geospatial_vertical_positive: up\n        identifier_product_doi: DOI: 10.5285/c6612cbe-50b3-0cff-e053-6c86abc09f8f\n        references: DOI: 10.5285/c6612cbe-50b3-0cff-e053-6c86abc09f8f\n        node_offset: 1\n```\n:::\n:::\n\n\nLooking on the metadata, we notice that there are three variables we need to extract from the file, these are longitude, latitude and depth. We use a `ncvar_get` function from **ncdf4** [@ncdf4] package to extract these variables. Note the name parsed in the function as should written as they appear in the metadata. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlat = ncvar_get(nc, \"lat\")\nlon = ncvar_get(nc, \"lon\")\nbathy = ncvar_get(nc, \"elevation\")\n```\n:::\n\n\nThen we can check the type of the file using a `class` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(bathy); class(lon); class(lat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"matrix\" \"array\" \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"array\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"array\"\n```\n:::\n:::\n\n\n\nWe notice these objects comes as array. we can check the size also\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(lon); dim(lat);dim(bathy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3600\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4080\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3600 4080\n```\n:::\n:::\n\n\nWe also notice that while lon and lat object are array, but they are vector and only bathy is the matrix. Therefore, we need to make a data frame so that we can make plots using ggplot package, which only work in the dataset that is organized as data.frame or tibble. That can be done using a `expand.grid` function. First we expand the lon and lat file followed with the bathy and combine them to make a tibble as the chunk below highlight. Because of the file size, only bathymetric values that fall within the pemba Channel were selected.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset = expand.grid(lon, lat) %>% \n  bind_cols(expand.grid(bathy)) %>% \n  as_tibble() %>% \n  rename(lon = 1, lat = 2, depth = 3)%>% \n  filter(lon >38.5 & lon < 40.5 & lat > -5.8 & lat < -4)\n```\n:::\n\n\n\nSeparate the dataset into the land and ocean based on zero (0) value as reference point, where the above sea level topography values are assumed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nland = dataset %>% filter(depth >0 )\nocean = dataset %>% filter(depth <= 0 )\n```\n:::\n\n\nLoad the basemap shapefile\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica = st_read(\"d:/africa.shp\", quiet = TRUE)\n```\n:::\n\n\nMake a color of land and depth that we will use later for mapping the topography and bathymetry, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#make palette\nocean.pal <- c(\"#000000\", \"#000413\", \"#000728\", \"#002650\", \"#005E8C\", \"#0096C8\", \"#45BCBB\", \"#8AE2AE\", \"#BCF8B9\", \"#DBFBDC\")\nland.pal <- c(\"#467832\", \"#887438\", \"#B19D48\", \"#DBC758\", \"#FAE769\", \"#FAEB7E\", \"#FCED93\", \"#FCF1A7\", \"#FCF6C1\", \"#FDFAE0\")\n```\n:::\n\n\nWe can plot the bathymetry  shown in @ fig-bathy with the code highlighted in the chunk below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  metR::geom_contour_fill(data = ocean, aes(x = lon, y = lat, z = depth), \n                          bins = 120, global.breaks = FALSE) +\n  metR::geom_contour2(data = ocean, aes(x = lon, y = lat, z = depth, \n                                        label = ..level..), breaks = c(-200,-600), skip = 0 )+\n  scale_fill_gradientn(colours = ocean.pal, name = \"Depth (m)\", \n                       breaks = seq(-1800,0,300), label = seq(1800,0,-300))+\n  ggspatial::layer_spatial(data = africa)+\n  coord_sf(xlim = c(38.9,40), ylim = c(-5.6,-4.1))+\n  theme_bw(base_size = 12)+\n  theme(axis.title = element_blank())+\n  ggspatial::annotation_scale()\n```\n\n::: {.cell-output-display}\n![Bathymetry of the Pemba Channel, solid lines are contour lines](index_files/figure-html/fig-bathy-1.png){#fig-bathy width=672}\n:::\n:::\n\n\nSimilary, we can plot togopgraphy of the area shown in @fig-bathy2 using the code shown below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  metR::geom_contour_fill(data = land, aes(x = lon, y = lat, z = depth), \n                          bins = 120, show.legend = TRUE) +\n  metR::geom_contour2(data = land, aes(x = lon, y = lat, z = depth), \n                      breaks = c(200), skip = 0 )+\n  scale_fill_gradientn(colours = land.pal, name = \"Topography\", \n                       trans = scales::sqrt_trans())+\n  ggspatial::layer_spatial(data = africa, fill = NA)+\n  coord_sf(xlim = c(38.9,40), ylim = c(-5.6,-4.1))+\n  theme_bw(base_size = 12)+\n  theme(axis.title = element_blank())\n```\n\n::: {.cell-output-display}\n![Elevation near the Pemba Channel, solid lines are contour lines](index_files/figure-html/fig-bathy2-1.png){#fig-bathy2 width=672}\n:::\n:::\n\n\n## The modern approach\n\nIn R ecosystem, the traditional handling of spatial data-- raster and vector has changed dramatically in recent years. The widely used **raster** [@raster] and **sp** [@sp] packages dominated spatial analysis in R for decades. This has changed recent with the introduction of new and more convinient packages. These packages include **terra**, which has functions for creating, reading, manipulating, and writing raster data [@terra]. The **terra** package provides, among other things, general raster data manipulation functions that can easily be used to develop more specific functions. The package also implements raster algebra and most functions for raster data manipulation.\n\nterra replaces the raster package. The interfaces of terra and raster are similar, but terra is simpler, faster and can do more. The sister package to **terra** is **tidyterra** [@tidyterra]. **tidyterra** is a package that add common methods from the **tidyverse** [@tidyverse] for SpatRaster and SpatVectors objects created with the **terra** package. It also adds specific `geom_spat*()` functions for plotting these kind of objects with **ggplot2** [@ggplot].\n\nLet's load the packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(terra)\nrequire(tidyterra)\n```\n:::\n\n\nThen we use a function `rast` from **terra** package to read raster file from the working directory of the local machine. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngebco = terra::rast(\"gebco.nc\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nThen we print the the bathymetry file that we just imported\n\n::: {.cell}\n\n```{.r .cell-code}\ngebco\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 4080, 3600, 1  (nrow, ncol, nlyr)\nresolution  : 0.004166667, 0.004166667  (x, y)\nextent      : 35, 50, -15, 2  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource      : gebco_2021_n2.0_s-15.0_w35.0_e50.0.nc \nvarname     : elevation (Elevation relative to sea level) \nname        : elevation \nunit        :         m \n```\n:::\n:::\n\nThe printed output is the metadata of the spatRaster with information that can assist to clear understand the file. I am not going into detail into it but he `coord. ref.` field shows `lon/lat WGS 84`, which is Geographic Coordinates with Datum WGS 84. If you just want to know the CRS from a `SpatRaster`, you just call `crs()` You also notice that the `varname` is the elevation, but in fact this dataset contain the altitude (elevation) for land and depth (bathymetry) for ocean and the unit of the measurement are in meters. Since the dataset is the raste, it provide the grid resolution of 0.004166667 degree, which is equivalent to a spatial resolution of 500 meters grid. \n\nThe geographical extent of the file is quite big range from longitude 35 to 50 and latitude -15 to 2. Since we only focus for the Pemba Channel, we need to crop the spatRaster to  our area of interest. **terra** package has `crop` function for that but, thi function requires us to purse a file that has defined geographical extent. The extent can easily defined using `ext` function, also from **terra** package. The geographical extent of our area ranged from longitude 38 to 41 and latitude -6.2 to -3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npemba.ext = terra::ext(38,41,-6.2,-3.8)\n\ngebco.pemba = terra::crop(\n  x = gebco, \n  y = pemba.ext\n  )\n\ngebco.pemba\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 576, 720, 1  (nrow, ncol, nlyr)\nresolution  : 0.004166667, 0.004166667  (x, y)\nextent      : 38, 41, -6.2, -3.8  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource(s)   : memory\nname        : elevation \nmin value   :     -2610 \nmax value   :      2247 \n```\n:::\n:::\n\nThe printed metadata indicated that the geographical extent meet what we defined above but it also provide the minimum and maximum values of the bathymetry and elevation values. **tidyterra** makes us use similar verbs of tidyverse to raster objects similar to tibble objects. For example, in the Pemba.gebco we can first filter and strip all elevation grid (elevation >0) and rename the elevation into depth with `rename` function and then use `as.data.frame` function from **terra** to convert spatRaster object to tibble. The chunk below summarise the above explanation;\n \n\n::: {.cell}\n\n```{.r .cell-code}\ngebco.pemba.tb = gebco.pemba %>% \n  tidyterra::filter(elevation <= 0) %>% \n  tidyterra::rename(depth = elevation) %>% \n  terra::as.data.frame(xy = TRUE)\n```\n:::\n\n\n\nIn addition of making tidyverse verbs that suits for tibble for manipulation of raster objects, **tidyterra** brings function for plotting raster object with **ggplot2**. A `geom_spatraster` function has enabled ability of plotting both elevation and bathymetry with color gradient that distinguish these layers in a more appealing form. It also has `geom_spatraster_contour` function for plotting contour from raster in **ggplot**. Simple feature and shapefile are also plotted with `geom_spatvector` function. The chunk below contains lines that illustrates the above explanation and rendered to generate @fig-fig4. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_spatraster(data = gebco.pemba, show.legend = TRUE)+\n  geom_spatraster_contour(data = gebco.pemba, breaks = c(-200), \n                          linewidth = 1.2, color = \"black\") +\n  geom_spatvector(data = africa, fill = NA, color = \"black\")+\n  geom_sf_text(data = africa, aes(label = str_to_upper(CNTRY_NAME)), \n               size = 2.3, check_overlap = TRUE)+\n  coord_sf(xlim = c(38.9,40), ylim = c(-5.6,-4.1))+\n  theme_bw() +\n  theme(legend.position = \"right\", axis.title = element_blank())+\n  ggspatial::annotation_north_arrow(location = \"tr\", \n                                    height = unit(1.5, \"cm\"),\n                                    width = unit(1, \"cm\"),\n                                    pad_x = unit(0.25, \"cm\"),\n                                    pad_y = unit(0.25, \"cm\"),\n                                    rotation = NULL)+\n  ggspatial::annotation_scale(location = \"bl\")+\n  scale_fill_hypso_tint_c(\n    palette = \"gmt_globe\",\n    labels = scales::label_number(big.mark = \",\"),\n    limits = c(-2000,2000),\n    breaks = seq(-3000,3000,500),\n    guide = guide_colorbar(\n      title = \"Bathymetry and Elevation\",\n      title.hjust = .5,\n      direction = \"vertical\",\n      title.position = \"right\",\n      title.theme = element_text(angle = 90),\n      barheight = 10,\n      barwidth = .60)\n    )\n```\n\n::: {.cell-output-display}\n![Bathymetry and elevation of the Pemba Channel. Solid black line is an isobar contour of 200 meter](index_files/figure-html/fig-fig4-1.png){#fig-fig4 width=576}\n:::\n:::\n\n\n## Cited Materials\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}