{
  "hash": "6ce747a1c81cad7d9fb43b839ab5fd3a",
  "result": {
    "markdown": "---\ntitle: \"plotting in Python with Seaborn: Joint plot\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/ \ndate: \"2023-02-22\"\ncategories: [Analysis, Visualization, Python]\nimage: \"jointPlot.jpg\"\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nbibliography: ../blog.bib\nexecute: \n  warning: false\nfig-width: 7\nfig-height: 5\ncode-line-numbers: true\n\n---\n\n\n## Introduction\n\nIn [Visualization with Seaborn](https://lugoga.github.io/semba-quarto/posts/seabornVisualization/) of this series, we were introduced on the power visualization and dove into distributions plot. In this post we are going focus on jointplot. `jointplot` is used to plot the histogram distribution of two columns, one on the `x-axis` and the other on the `y-axis`. A scatter plot is by default drawn for the points in the two columns. Seaborn has nifty function called `jointplot()`, which is dedicated for this type of plot. \n\n\n## Loading libraries\n\nThough most people are familiar with plotting using matplot, as it inherited most of the functions from MatLab. Python has an extremely nady library for data visualiztion called seaborn. The Seaborn library is based on the Matplotlib library. Therefore, you will also need to import the Matplotlib library.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\nsns.set_theme()\n```\n:::\n\n\n## Dataset\n\nWe are going to use a penguin dataset from palmerpenguins package [@horst2022palmer]. We do not need to download this dataset as it comes with the seaborn package. We only need to load it from the package into our session using `sns.load_dataset` function and specify the `penguins` as the name of the dataset and assign it as df;\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = sns.load_dataset(\"penguins\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...         3750    male  2007\n1  Adelie  Torgersen            39.5  ...         3800  female  2007\n2  Adelie  Torgersen            40.3  ...         3250  female  2007\n3  Adelie  Torgersen             NaN  ...  -2147483648     NaN  2007\n4  Adelie  Torgersen            36.7  ...         3450  female  2007\n\n[5 rows x 8 columns]\n```\n:::\n:::\n\n\nA printed `df` dataset shows that is made up of various measurements of three different penguin species --- Adelie, Gentoo, and Chinstrap. The dataset contains seven variables -- species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, and year.\n\n\nThe joint plot is used to plot the histogram distribution of two columns, one on the x-axis and the other on the y-axis. A scatter plot is by default drawn for the points in the two columns. To plot a joint plot, you need to call the `jointplot()` function. The following script plots a joint plot for `bill_length_mm` and `bill_depth_mm` columns of the df dataset.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = plt.figure()\nsns.jointplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<seaborn.axisgrid.JointGrid object at 0x000000005A814D00>\n```\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=576}\n:::\n:::\n\n\nAssigning a hue variable will add conditional colors to the scatter plot and draw separate density curves (using `kdeplot()`) on the marginal axes. In this case we specify `hue = \"island\"`\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = plt.figure()\nsns.jointplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue = \"island\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<seaborn.axisgrid.JointGrid object at 0x000000005D55D160>\n```\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-3.png){width=576}\n:::\n:::\n\n\nSeveral different approaches to plotting are available through the kind parameter. Setting kind=\"kde\" will draw both bivariate and univariate KDEs:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = plt.figure()\nsns.jointplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", kind=\"kde\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<seaborn.axisgrid.JointGrid object at 0x000000005D707310>\n```\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-5.png){width=576}\n:::\n:::\n\n\n\nSet `kind=\"reg\"` to add a linear regression fit (using `regplot()`) and univariate KDE curves:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\nsns.jointplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", kind=\"reg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<seaborn.axisgrid.JointGrid object at 0x000000005D8163D0>\n```\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-7.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\nsns.jointplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", kind=\"hex\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<seaborn.axisgrid.JointGrid object at 0x000000005DC64610>\n```\n:::\n\n```{.python .cell-code}\nplt.show()\n\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-9.png){width=576}\n:::\n:::\n\n\n\n\n## Cited Materials\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}