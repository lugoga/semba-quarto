{
  "hash": "4f766e960b3b19b0bdcd39344ba320c6",
  "result": {
    "markdown": "---\ntitle: \"Multi-lingual: R and Python for Data Science\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/ \ndate: \"2023-02-18\"\ncategories: [Analysis, Visualization]\n# image: \"family.jpg\"\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nbibliography: ../blog.bib\nexecute: \n  warning: false\n---\n\n\n\n## Introduction\n\nIf you work with data science, `R` and `Python` must be the two programming languages that you use the most. Both `R` and `Python` are quite robust languages and either one of them is actually sufficient to carry out the data analysis task. However, instead of considering them as tools that supplement each other, more often you will find people dealing with data claim one language to be better than the other. Truth be told, `R` and `Python` are excellent tools in ther own right but are often conceived as rivals. One major reason for such view lies on the experts. Because data analysts have divided the data science field into camps based on the choice of the programming language they are familiar with.\n\nThere major two camps---*R camp* and *Python camp*---and history is the testimony that camps can not live in *harmony*. Members of both camps believe that their choice of language . Honestly, I do not hold to their opinion, but rather wish I have skills for both languages. So, whether you have in R or Python camp, one thing you will notice is that the problem we have in data science is simply that divergence does not lie with the tools but with the people using those tools.\n\nI believe there are few people in the Data Science community who use both R and Python in their analytical workflow. But majority are committed to only one programming language, but wish they had access to some functions from other language. Therefore, there is no reason that hold us to stick using this programming language or the other. Our ultimate goal should be to do better analytics and derive better insights and choice of which programming language to use should not hinder us from reaching our goals.\n\nThe questions that always resolute in my mind is whether can we utilize the statistical power of R along with the programming capabilities of Python?. Its undeniable truth that there are definitely some high and low points for both languages and if we can utilize the strength of both, we can end up dong a much better job. Thanks to Kevin Ushey and his colleges [-@reticulate] for developing a reticulate package. **reticulate** package provides a comprehensive set of tools that allows to work with R and Python in the same environment. The **reticulate** package provide the following facilities;\n\n-   Calling Python from R in a variety of ways including `rmarkdown`, `sourcing`, `Python scripts`, importing Python modules and using Python interactively within and R session.\n\n-   Translation between R and Python objects---for example `r_to_py` function allows to construct R to Pandas data frame and `py_to_r()` function convert python object like data frame, matrix and etc to R\n\n-   Flexible binding to different versions of Python including virtual environments and conda environment.\n\n## Tibble to Pandas Dataframe\n\nWe are going to use a `penguin` dataset from **palmerpenguins** package [@horst2022palmer]. We first need to import the dataset from the package where is stored into the R session. let us load the packages that we are glint to use in this post. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyverse)\nrequire(reticulate)\n```\n:::\n\n\nOnce we have loaded the package, we then import the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npeng = palmerpenguins::penguins\npeng\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 x 8\n   species island    bill_length_mm bill_depth_mm flipper_~1 body_~2 sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema~  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema~  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema~  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema~  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# ... with 334 more rows, and abbreviated variable names 1: flipper_length_mm,\n#   2: body_mass_g\n```\n:::\n:::\n\n\nThe printed result suggest that this dataset is a *tibble* format---a modern data frame from the tidyverse ecosystem [@tidyverse]. Let's visualize the dataset with pair plot in **GGally** package [@ggally]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npeng %>% \n  filter(!is.na(sex)) %>% \n  GGally::ggpairs(columns = 3:6, aes(color = sex))\n```\n\n::: {.cell-output-display}\n![Matrix of numerical variable in the penguins dataset](index_files/figure-pdf/fig-ggpair-1.pdf){#fig-ggpair fig-pos='H'}\n:::\n:::\n\n\n\nHowever, our interest in this post is plotting this dataset using python. Therefore, we need to first import three key libraries that we will use throughtout this post. The chunk below highlight these packages and how to import them inside the python chunk.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\nOnce the tibble file is in the environment, we need to convert from tibble data frame into pandas dataframe. Make a copy of pandas dataframe from tible with the `r.` function\n\n::: callout-info\nnote that conversion from tibble to pandas data frame must be done in the Python chunk and not R chunk\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\npeng = r.peng\npeng\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       species     island  bill_length_mm  ...  body_mass_g     sex  year\n0       Adelie  Torgersen            39.1  ...         3750    male  2007\n1       Adelie  Torgersen            39.5  ...         3800  female  2007\n2       Adelie  Torgersen            40.3  ...         3250  female  2007\n3       Adelie  Torgersen             NaN  ...  -2147483648     NaN  2007\n4       Adelie  Torgersen            36.7  ...         3450  female  2007\n..         ...        ...             ...  ...          ...     ...   ...\n339  Chinstrap      Dream            55.8  ...         4000    male  2009\n340  Chinstrap      Dream            43.5  ...         3400  female  2009\n341  Chinstrap      Dream            49.6  ...         3775    male  2009\n342  Chinstrap      Dream            50.8  ...         4100    male  2009\n343  Chinstrap      Dream            50.2  ...         3775  female  2009\n\n[344 rows x 8 columns]\n```\n:::\n:::\n\n\n## Plotting\n\n### Pairplot\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = plt.figure()\nsns.pairplot(data = peng, hue = \"species\")\n```\n\n::: {.cell-output-display}\n![The pairplot of penguins dataset](index_files/figure-pdf/fig-pairplot-1.pdf){#fig-pairplot-1 fig-pos='H'}\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![The pairplot of penguins dataset](index_files/figure-pdf/fig-pairplot-2.pdf){#fig-pairplot-2 fig-pos='H'}\n:::\n:::\n\n\n### Scatter plot\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\n\nsns.scatterplot(\n  data = peng, \n  x = \"bill_length_mm\", \n  y = \"bill_depth_mm\", \n  hue = \"island\"\n  )\n  \n\nplt.xlabel(\"Length (mm)\")\nplt.ylabel(\"Depth (mm)\")\nplt.legend(loc = \"lower right\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Scatterplot of length and depth of penguins](index_files/figure-pdf/fig-scatter-5.pdf){#fig-scatter fig-pos='H'}\n:::\n:::\n\n\n### Histogram\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = plt.figure()\nsns.histplot(data = peng, x = \"bill_depth_mm\", color = \"steelblue\")\nplt.xlabel(\"Bill depth (mm)\")\nplt.ylabel(\"Frequency\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Histogram of bill depth](index_files/figure-pdf/fig-hist-7.pdf){#fig-hist fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = plt.figure()\nsns.histplot(data = peng[peng.island == \"Dream\"], x = \"bill_depth_mm\", color = \"steelblue\", label = \"Dream\")\nsns.histplot(data = peng[peng.island == \"Biscoe\"], x = \"bill_depth_mm\", color = \"darkorchid\", label = \"Biscoe\")\nsns.histplot(data = peng[peng.island == \"Torgersen\"], x = \"bill_depth_mm\", color = \"lightblue\", label = \"Torgersen\")\nplt.xlabel(\"Bill depth (mm)\")\nplt.ylabel(\"Frequency\")\nplt.legend(loc = \"upper right\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Histogram of bill depth](index_files/figure-pdf/fig-hist-mult-9.pdf){#fig-hist-mult fig-pos='H'}\n:::\n:::\n\n\n##3 Density\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = plt.figure()\nsns.kdeplot(data = peng, x = \"bill_length_mm\", shade = \"steelblue\")\nplt.axvline(43.40, color=\"k\", linestyle=\"--\")\nplt.ylabel(\"Density\")\nplt.xlabel(\"Bill length (mm)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Density distribution of  of bill depth](index_files/figure-pdf/fig-dens-11.pdf){#fig-dens fig-pos='H'}\n:::\n:::\n\n\nThe difference of bill length among the three species is interesting. Let's look at the density plots of these species:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = plt.figure()\nsns.kdeplot(data = peng[peng.species == \"Adelie\"], x = \"bill_length_mm\", label = \"Adelie\", shade = \"steelblue\")\nsns.kdeplot(data = peng[peng.species == \"Chinstrap\"], x = \"bill_length_mm\", label = \"Chinstrap\", shade = \"orange\")\nsns.kdeplot(data = peng[peng.species == \"Gentoo\"], x = \"bill_length_mm\", label = \"Gentoo\", shade = \"green\")\nplt.legend(loc = \"upper right\")\nplt.xlabel(\"Bill length (mm)\")\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![Density plot of bill length by species](index_files/figure-pdf/fig-density-mul-13.pdf){#fig-density-mul fig-pos='H'}\n:::\n:::\n\n\n### Boxplot\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\nsns.boxplot(data = peng, x = \"island\", y = \"bill_depth_mm\", hue = \"species\")\nplt.xlabel(\"\")\nplt.ylabel(\"Bill depth (mm)\")\nplt.legend(loc = \"lower right\")\n# plt.gca().legend_.remove() # uncomment to remove legend\nplt.show()\n```\n\n::: {.cell-output-display}\n![Boxplot of bill depth by island and species](index_files/figure-pdf/fig-box-15.pdf){#fig-box fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\nsns.violinplot(data = peng, x = \"island\", y = \"bill_depth_mm\", hue = \"species\")\nplt.xlabel(\"\")\nplt.ylabel(\"Bill depth (mm)\")\nplt.legend(loc = \"lower right\")\n# plt.gca().legend_.remove() # uncomment to remove legend\nplt.show()\n```\n\n::: {.cell-output-display}\n![Violin plots of bill depth by island and species](index_files/figure-pdf/fig-vio-17.pdf){#fig-vio fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure()\nsns.violinplot(data = peng, x = \"island\", y = \"bill_depth_mm\", hue = \"species\")\nsns.boxplot(data = peng, x = \"island\", y = \"bill_depth_mm\", hue = \"species\")\nplt.xlabel(\"\")\nplt.ylabel(\"Bill depth (mm)\")\nplt.legend(loc = \"lower right\")\n# plt.gca().legend_.remove() # uncomment to remove legend\nplt.show()\n```\n\n::: {.cell-output-display}\n![Violin and Boxplot of bill depth by island and species](index_files/figure-pdf/fig-vio-box-19.pdf){#fig-vio-box fig-pos='H'}\n:::\n:::\n\n\n## Pandas Dataframe to Tibble\n\nThe power of multilingual is clearly demonstrated with Rstudio, which allows you to swap dataset between R and python. In the previous section we created a `peng` dataset in python from R. In this session we are going to use this python dataset and convert it back to R.  A `py` function from **reticulate** package is used as the chunk below illustrates:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npeng.r = reticulate::py$peng\npeng.r %>% as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 x 8\n   species island    bill_length_mm bill_depth_mm flipper_~1 body_~2 sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <dbl>   <dbl> <fct> <dbl>\n 1 Adelie  Torgersen           39.1          18.7     1.81e2  3.75e3 male   2007\n 2 Adelie  Torgersen           39.5          17.4     1.86e2  3.8 e3 fema~  2007\n 3 Adelie  Torgersen           40.3          18       1.95e2  3.25e3 fema~  2007\n 4 Adelie  Torgersen           NA            NA      -2.15e9 -2.15e9 <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3     1.93e2  3.45e3 fema~  2007\n 6 Adelie  Torgersen           39.3          20.6     1.9 e2  3.65e3 male   2007\n 7 Adelie  Torgersen           38.9          17.8     1.81e2  3.62e3 fema~  2007\n 8 Adelie  Torgersen           39.2          19.6     1.95e2  4.68e3 male   2007\n 9 Adelie  Torgersen           34.1          18.1     1.93e2  3.48e3 <NA>   2007\n10 Adelie  Torgersen           42            20.2     1.9 e2  4.25e3 <NA>   2007\n# ... with 334 more rows, and abbreviated variable names 1: flipper_length_mm,\n#   2: body_mass_g\n```\n:::\n:::\n\n\n::: callout-info\nnote that conversion from pandas to tibble data frame must be done in the R chunk and not Python chunk\n:::\n\n\n\n## Cited references\n\n",
    "supporting": [
      "index_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}