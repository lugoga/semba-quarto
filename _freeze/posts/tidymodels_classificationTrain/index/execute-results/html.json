{
  "hash": "57573156eb8f9ad312157b9e0816812b",
  "result": {
    "markdown": "---\ntitle: \"Machine learning with tidymodels: Binary Classification Model\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/ \ndate: \"2023-04-13\"\ncategories: [Manipulation,Visualization, R, Modelling]\ntags: \n  - tidymodels\n  - classification\n  - modelling\n  - Masumbuko Semba\nimage: \"binary.jpg\"\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nbibliography: ../blog.bib\ncsl:  ../apa.csl\nexecute: \n  warning: false\nfig-width: 7\nfig-height: 5\ncode-line-numbers: true\n---\n\n\n# A gentle introduction\nIn this post, we’ll learn how to create Machine learning models using R. Machine learning is the foundation for predictive modeling and artificial intelligence. We’ll learn the core principles of machine learning and how to use common tools and frameworks to train, evaluate, and use machine learning models. in this post we are going to manipulate and visualize diabetes dataset and train and evaluate binary regression models. But before we proceed, we need some packages to accomplish the step in this post. We can have them installed as: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c('tidyverse', 'tidymodels', 'ranger', 'vip', 'palmerpenguins', 'skimr', 'paletteer', 'nnet', 'here'))\n```\n:::\n\n\nThen we load the packages in the session\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyverse)\nrequire(tidymodels)\nrequire(magrittr)\nrequire(patchwork)\n```\n:::\n\n\n\n## Binary classification\n\nLet’s start by looking at an example of *binary* classification, where the model must predict a label that belongs to one of two classes. In this exercise, we’ll train a binary classifier to predict whether or not a patient should be tested for diabetes based on some medical data.\n\n### Explore the data\n\nLet’s first import a file of patients data direct from the internet with `read_csv` function of **readr** package [@readr], part of the tidyverse ecosystem [@tidyverse];\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes <- read_csv(file = \"https://raw.githubusercontent.com/MicrosoftDocs/ml-basics/master/data/diabetes.csv\")\n```\n:::\n\n\nWe then print the dataset to explore the variables and records contained in the dataset;\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15,000 x 10\n   PatientID Pregn~1 Plasm~2 Diast~3 Trice~4 Serum~5   BMI Diabe~6   Age Diabe~7\n       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl> <dbl>   <dbl>\n 1   1354778       0     171      80      34      23  43.5  1.21      21       0\n 2   1147438       8      92      93      47      36  21.2  0.158     23       0\n 3   1640031       7     115      47      52      35  41.5  0.0790    23       0\n 4   1883350       9     103      78      25     304  29.6  1.28      43       1\n 5   1424119       1      85      59      27      35  42.6  0.550     22       0\n 6   1619297       0      82      92       9     253  19.7  0.103     26       0\n 7   1660149       0     133      47      19     227  21.9  0.174     21       0\n 8   1458769       0      67      87      43      36  18.3  0.236     26       0\n 9   1201647       8      80      95      33      24  26.6  0.444     53       1\n10   1403912       1      72      31      40      42  36.9  0.104     26       0\n# ... with 14,990 more rows, and abbreviated variable names 1: Pregnancies,\n#   2: PlasmaGlucose, 3: DiastolicBloodPressure, 4: TricepsThickness,\n#   5: SerumInsulin, 6: DiabetesPedigree, 7: Diabetic\n```\n:::\n:::\n\n\n\nThough the printed output tell us that there are fifteen thousand records and ten variable, but sometimes you may wish to explore the internal structure of the dataset. The `glimpse` function from **dplyr** package can do that by listing the available variables and their types;\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 15,000\nColumns: 10\n$ PatientID              <dbl> 1354778, 1147438, 1640031, 1883350, 1424119, 16~\n$ Pregnancies            <dbl> 0, 8, 7, 9, 1, 0, 0, 0, 8, 1, 1, 3, 5, 7, 0, 3,~\n$ PlasmaGlucose          <dbl> 171, 92, 115, 103, 85, 82, 133, 67, 80, 72, 88,~\n$ DiastolicBloodPressure <dbl> 80, 93, 47, 78, 59, 92, 47, 87, 95, 31, 86, 96,~\n$ TricepsThickness       <dbl> 34, 47, 52, 25, 27, 9, 19, 43, 33, 40, 11, 31, ~\n$ SerumInsulin           <dbl> 23, 36, 35, 304, 35, 253, 227, 36, 24, 42, 58, ~\n$ BMI                    <dbl> 43.50973, 21.24058, 41.51152, 29.58219, 42.6045~\n$ DiabetesPedigree       <dbl> 1.21319135, 0.15836498, 0.07901857, 1.28286985,~\n$ Age                    <dbl> 21, 23, 23, 43, 22, 26, 21, 26, 53, 26, 22, 23,~\n$ Diabetic               <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,~\n```\n:::\n:::\n\nThis data consists of 15,000 patients with 10 variables that were used to diagnose diabetes. In this post we tread a `Diabetic` as *outome* and the remaining variables as *predictor*. A predictor variable is used to predict the occurrence and/or level of another variable, called the outcome variable. Let’s tidy and reorganize in format that easy for model to understand. The variable names do not follow the recommended standard therefore we clean them using `clean_names` function from janitor package [@janitor]. We also notice that some of the variable like PatientId adds no effect in the model and was dropped from the dataset. \n\nFurther, since we are going to use classification algorithm in this we need to convert our our predictor variable--diabetic--from numerical to factor. This is the outcome (label) and other variable like Pregnancies, PlasmaGlucose, DiastolicBloodPressure, BMI and so on are the predictor (features) we will use to predict the Diabetic label.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes.tidy = diabetes %>% \n  janitor::clean_names() %>% \n  select(-patient_id) %>% \n  mutate(diabetic = if_else(diabetic == 1, \"Diabetic\", \"Non diabetic\"),\n         diabetic = as.factor(diabetic))\n\ndiabetes.tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15,000 x 9\n   pregnancies plasma_gluc~1 diast~2 trice~3 serum~4   bmi diabe~5   age diabe~6\n         <dbl>         <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl> <dbl> <fct>  \n 1           0           171      80      34      23  43.5  1.21      21 Non di~\n 2           8            92      93      47      36  21.2  0.158     23 Non di~\n 3           7           115      47      52      35  41.5  0.0790    23 Non di~\n 4           9           103      78      25     304  29.6  1.28      43 Diabet~\n 5           1            85      59      27      35  42.6  0.550     22 Non di~\n 6           0            82      92       9     253  19.7  0.103     26 Non di~\n 7           0           133      47      19     227  21.9  0.174     21 Non di~\n 8           0            67      87      43      36  18.3  0.236     26 Non di~\n 9           8            80      95      33      24  26.6  0.444     53 Diabet~\n10           1            72      31      40      42  36.9  0.104     26 Non di~\n# ... with 14,990 more rows, and abbreviated variable names 1: plasma_glucose,\n#   2: diastolic_blood_pressure, 3: triceps_thickness, 4: serum_insulin,\n#   5: diabetes_pedigree, 6: diabetic\n```\n:::\n:::\n\n\nOur primary goal of data exploration is to try to understand the existing relationship patterns between variables in the dataset. Therefore, we should assess any apparent correlation  using picture through data visualization. To make it easy to plot multiple plot at once, the format of our dataset at this stage is wide, and that prevent us doing that. In order to plot all variable in single plot, we must first convert the dataset from wide format to long format, and we can do that using `pivot_longer` function from **dplyr** package [@dplyr].\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes.tidy.long = diabetes.tidy %>% \n  pivot_longer(\n    cols = !diabetic, \n    names_to = \"features\", \n    values_to = \"values\"\n               )\n```\n:::\n\n\n\nOnce we have pivoted the data to long format, we can create plot in a single plot using multiple facet;\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_light())\n\ndiabetes.tidy.long %>% \n  ggplot(aes(x = diabetic, y = values, fill = features)) +\n  geom_boxplot() + \n  facet_wrap(~ features, scales = \"free\", ncol = 4) +\n  scale_color_viridis_d(option = \"plasma\", end = .7) +\n  scale_y_continuous(name = \"Values\", trans = scales::sqrt_trans())+\n  theme(legend.position = \"none\", axis.title.x = element_blank(), \n        strip.background = element_rect(fill = \"grey60\"), \n        strip.text = element_text(color = \"white\", face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![Boxplot of the predictor variables between diabetic and non-diabetic patients](index_files/figure-html/fig-fig1-1.png){#fig-fig1 width=672}\n:::\n:::\n\nThe values of the predictor vary between diabetic and non-diabetic individuals. In particular, with exception of diabetes_pedigree and triceps_thickness, other predictors show that diabetic individual with relatively high values than non-diabetic (@fig-fig1). These features may help predict whether or not a patient is diabetic.\n\n### Split the data\nOur dataset includes known values for the label, so we can use this to train a classifier so that it finds a statistical relationship between the features and the label value; but how will we know if our model is any good? How do we know it will predict correctly when we use it with new data that it wasn’t trained with?\n\nIt is best practice to hold out part of the data for testing in order to get a better estimate of how models will perform on new data by comparing the predicted labels with the already known labels in the test set. Well, we can take advantage of the fact we have a large dataset with known label values, use only some of it to train the model, and hold back some to test the trained model - enabling us to compare the predicted labels with the already known labels in the test set.\n\nIn R, the **tidymodels** framework provides a collection of packages for modeling and machine learning using tidyverse principles [@tidymodels]. For instance, **rsample**, a package in tidymodels, provides infrastructure for efficient data splitting and resampling [@rsample]:\n\n+ `initial_split()`: specifies how data will be split into a training and testing set\n+ `training()` and `testing()` functions extract the data in each split\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split data into 70% for training and 30% for testing\nset.seed(2056)\ndiabetes_split <- diabetes.tidy %>% \n  initial_split(prop = 0.70)\n\n\n# Extract the data in each split\ndiabetes_train <- training(diabetes_split)\ndiabetes_test <- testing(diabetes_split)\n\n\n# Print the number of cases in each split\ncat(\"Training cases: \", nrow(diabetes_train), \"\\n\",\n    \"Test cases: \", nrow(diabetes_test), sep = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTraining cases: 10500\nTest cases: 4500\n```\n:::\n:::\n\n## Train and Evaluate a Binary Classification Model\n\nOnce we have separated the dataset into train and test set, now we’re ready to train our model by fitting the training features to the training labels (diabetic). There are various algorithms we can use to train the model.\n\n### Logistic regression Algorithm\n\nIn this section, we’ll use *Logistic Regression*, which is a well-established algorithm for classification. Logistic regression is a binary classification algorithm, meaning it predicts two categories. There are quite a number of ways to fit a logistic regression model in tidymodels. For now, let’s fit a logistic regression model via the default `stats::glm()` engine.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a model specification\nlogreg_spec <- logistic_reg() %>% \n  set_engine(\"glm\") %>% \n  set_mode(\"classification\")\n\n\n# Print the model specification\nlogreg_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n\nAfter a model has been specified, the model can be estimated or trained using the fit() function, typically using a symbolic description of the model (a formula) and some data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train a logistic regression model\nlogreg_fit <- logreg_spec %>% \n  fit(diabetic ~ ., data = diabetes_train)\n\n\n# Print the model object\nlogreg_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nparsnip model object\n\n\nCall:  stats::glm(formula = diabetic ~ ., family = stats::binomial, \n    data = data)\n\nCoefficients:\n             (Intercept)               pregnancies            plasma_glucose  \n                8.624243                 -0.266296                 -0.009615  \ndiastolic_blood_pressure         triceps_thickness             serum_insulin  \n               -0.012297                 -0.022807                 -0.003932  \n                     bmi         diabetes_pedigree                       age  \n               -0.049028                 -0.923262                 -0.056876  \n\nDegrees of Freedom: 10499 Total (i.e. Null);  10491 Residual\nNull Deviance:\t    13290 \nResidual Deviance: 9221 \tAIC: 9239\n```\n:::\n:::\n\n\nThe model print out shows the coefficients learned during training. Now we’ve trained the model using the training data, we can use the test data we held back to evaluate how well it predicts using `parsnip::predict()`. Let’s start by using the model to predict labels for our test set, and compare the predicted labels to the known labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make predictions then bind them to the test set\nresults <- diabetes_test %>% \n  select(diabetic) %>% \n  bind_cols(\n    logreg_fit %>% predict(new_data = diabetes_test)\n    )\n\n# Compare predictions\nresults %>% \n  slice_head(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 2\n   diabetic     .pred_class \n   <fct>        <fct>       \n 1 Non diabetic Non diabetic\n 2 Non diabetic Non diabetic\n 3 Non diabetic Non diabetic\n 4 Non diabetic Non diabetic\n 5 Diabetic     Diabetic    \n 6 Non diabetic Non diabetic\n 7 Non diabetic Non diabetic\n 8 Diabetic     Non diabetic\n 9 Non diabetic Non diabetic\n10 Non diabetic Non diabetic\n```\n:::\n:::\n\n\nComparing each prediction with its corresponding “ground truth” actual value isn’t a very efficient way to determine how well the model is predicting. Fortunately, **tidymodels** has a few more tricks up its sleeve: **yardstick** - a package used to measure the effectiveness of models using performance metrics [@yardstick]. The most obvious thing you might want to do is to check the accuracy of the predictions - in simple terms, what proportion of the labels did the model predict correctly? `yardstick::accuracy()` does just that!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate accuracy: proportion of data predicted correctly\naccuracy(\n  data = results, \n  truth = diabetic, \n  estimate = .pred_class\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.789\n```\n:::\n:::\n\nThe accuracy is returned as a decimal value - a value of 1.0 would mean that the model got 100% of the predictions right; while an accuracy of 0.0 is, well, pretty useless! Accuracy seems like a sensible metric to evaluate (and to a certain extent it is), but you need to be careful about drawing too many conclusions from the accuracy of a classifier. Remember that it’s simply a measure of how many cases were predicted correctly. Suppose only 3% of the population is diabetic. You could create a classifier that always just predicts 0, and it would be 97% accurate - but not terribly helpful in identifying patients with diabetes!\n\nFortunately, there are some other metrics that reveal a little more about how our classification model is performing.One performance metric associated with classification problems is the confusion matrix. A confusion matrix describes how well a classification model performs by tabulating how many examples in each class were correctly classified by a model. In our case, it will show you how many cases were classified as negative (0) and how many as positive (1); the confusion matrix also shows you how many were classified into the wrong categories. The `conf_mat()` function from yardstick calculates this cross-tabulation of observed and predicted classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Confusion matrix for prediction results\nresults %>% \n  conf_mat(truth = diabetic, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              Truth\nPrediction     Diabetic Non diabetic\n  Diabetic          897          293\n  Non diabetic      657         2653\n```\n:::\n:::\n\nThe descriptive statistic of confusion matrix presented above can be presented visually as shown in @fig-confmat\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize conf mat\nupdate_geom_defaults(geom = \"rect\", new = list(fill = \"midnightblue\", alpha = 0.7))\n\nresults %>% \n  conf_mat(diabetic, .pred_class) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![Visualize confusion matrix plot](index_files/figure-html/fig-confmat-1.png){#fig-confmat width=672}\n:::\n:::\n\n\n**tidymodels** provides yet another succinct way of evaluating all these metrics. Using `yardstick::metric_set()`, you can combine multiple metrics together into a new function that calculates all of them at once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine metrics and evaluate them all at once\neval_metrics <- \n  metric_set(ppv, recall, accuracy, f_meas)\n\n\neval_metrics(\n  data = results, \n  truth = diabetic, \n  estimate = .pred_class\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 ppv      binary         0.754\n2 recall   binary         0.577\n3 accuracy binary         0.789\n4 f_meas   binary         0.654\n```\n:::\n:::\n\n\nUntil now, we’ve considered the predictions from the model as being either 1 or 0 class labels. Actually, things are a little more complex than that. Statistical machine learning algorithms, like logistic regression, are based on probability; so what actually gets predicted by a binary classifier is the probability that the label is true $P(y)$\n) and the probability that the label is false $1−P(y)$. A threshold value of 0.5 is used to decide whether the predicted label is a 1 $P(y)>0.5$ or a 0 $P(y)<=0.5$. Let’s see the probability pairs for each case:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predict class probabilities and bind them to results\nresults <- results %>% \n  bind_cols(logreg_fit %>% \n              predict(new_data = diabetes_test, type = \"prob\"))\n\n  \n\n\n# Print out the results\nresults %>% \n  slice_head(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 4\n   diabetic     .pred_class  .pred_Diabetic `.pred_Non diabetic`\n   <fct>        <fct>                 <dbl>                <dbl>\n 1 Non diabetic Non diabetic         0.417                 0.583\n 2 Non diabetic Non diabetic         0.0985                0.902\n 3 Non diabetic Non diabetic         0.0469                0.953\n 4 Non diabetic Non diabetic         0.0561                0.944\n 5 Diabetic     Diabetic             0.581                 0.419\n 6 Non diabetic Non diabetic         0.331                 0.669\n 7 Non diabetic Non diabetic         0.288                 0.712\n 8 Diabetic     Non diabetic         0.270                 0.730\n 9 Non diabetic Non diabetic         0.275                 0.725\n10 Non diabetic Non diabetic         0.131                 0.869\n```\n:::\n:::\n\n\nThe decision to score a prediction as a 1 or a 0 depends on the threshold to which the predicted probabilities are compared. If we were to change the threshold, it would affect the predictions; and therefore change the metrics in the confusion matrix. A common way to evaluate a classifier is to examine the true positive rate (which is another name for recall) and the false positive rate $(1 - specificity)$ for a range of possible thresholds. These rates are then plotted against all possible thresholds to form a chart known as a received operator characteristic (ROC) chart, like this:\n\n::: callout-important\nA receiver operating characteristic curve, or ROC curve, is a graphical plot that illustrates the diagnostic ability of a binary classifier system as its discrimination threshold is varied.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a roc_chart\nresults %>% \n  roc_curve(truth = diabetic, .pred_Diabetic) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![The ROC curve](index_files/figure-html/fig-roc-1.png){#fig-roc width=672}\n:::\n:::\n\n\nThe @fig-roc shows the curve of the true and false positive rates for different threshold values between 0 and 1. A perfect classifier would have a curve that goes straight up the left side and straight across the top. The diagonal line across the chart represents the probability of predicting correctly with a $\\frac{50}{50}$ random prediction; so you obviously want the curve to be higher than that (or your model is no better than simply guessing!).\n\nThe area under the curve (AUC) is a value between 0 and 1 that quantifies the overall performance of the model. One way of interpreting AUC is as the probability that the model ranks a random positive example more highly than a random negative example. The closer to 1 this value is, the better the model. Once again, `tidymodels` includes a function to calculate this metric: `yardstick::roc_auc()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the AUC\nresults %>% \n  roc_auc(diabetic, .pred_Diabetic)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.860\n```\n:::\n:::\n\n\n### Random Forest Algorithm\nWe have been dealing with logistic regression, which is a linear algorithm. tidymodels provide a swift approach to change algorithms in the model. For instance , we can change the logistic regression to other kind of classification algorithms inluding:\n\n+ *Support Vector Machine algorithms*: Algorithms that define a hyperplane that separates classes.\n+ *Tree-based algorithms*: Algorithms that build a decision tree to reach a prediction\n+ *Ensemble algorithms*: Algorithms that combine the outputs of multiple base algorithms to improve generalizability.\n\nTo make life simple, let us train the model using an ensemble algorithm named *Random Forest* that averages the outputs of multiple random decision trees. Random forests help to reduce tree correlation by injecting more randomness into the tree-growing process. More specifically, instead of considering all predictors in the data, for calculating a given split, random forests pick a random sample of predictors to be considered for that split.\n\nGiven the experience of the logistic regression model, the power of tidymodels is consistence and therefore we do not need to start over, the only thing we need to do is simply to specify and fit  a random forest algorithm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preprocess the data for modelling\ndiabetes_recipe <- recipe(diabetic ~ ., data = diabetes_train) %>% \n  step_mutate(age = factor(age)) %>% \n  step_normalize(all_numeric_predictors()) %>% \n  step_dummy(age)\n\n# specify a random forest model specification\nrf_spec <- rand_forest() %>% \n  set_engine(\"ranger\", importance = \"impurity\") %>% \n  set_mode(\"classification\")\n\n# Bundle recipe and model spec into a workflow\nrf_wf <- workflow() %>% \n  add_recipe(diabetes_recipe) %>% \n  add_model(rf_spec)\n\n# Fit a model\nrf_wf_fit <- rf_wf %>% \n  fit(data = diabetes_train)\n\n# # spefiy the model\n# rf.fit  = rand_forest() %>% \n#   set_engine(engine = \"ranger\") %>% \n#   set_mode(mode = \"classification\") %>% \n#   # fit the model\n#   fit(diabetic ~ ., data = diabetes_train)\n```\n:::\n\n\n\nThen we make prediction of the fitted model with the test dataset\n\n::: {.cell}\n\n```{.r .cell-code}\nrf.prediction = rf_wf_fit %>% \n  predict(new_data = diabetes_test)\n\nrf.prediction.prob  =  rf_wf_fit %>% \n  predict(new_data = diabetes_test, type = \"prob\")\n\nrf.prediction =  rf.prediction %>% \n  bind_cols(rf.prediction.prob)\n\nrf.result = diabetes_test %>% \n  select(diabetic) %>% \n  bind_cols(rf.prediction)\n\nrf.result\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,500 x 4\n   diabetic     .pred_class  .pred_Diabetic `.pred_Non diabetic`\n   <fct>        <fct>                 <dbl>                <dbl>\n 1 Non diabetic Non diabetic        0.275                 0.725 \n 2 Non diabetic Non diabetic        0.0137                0.986 \n 3 Non diabetic Non diabetic        0.00739               0.993 \n 4 Non diabetic Non diabetic        0.0108                0.989 \n 5 Diabetic     Diabetic            0.910                 0.0902\n 6 Non diabetic Non diabetic        0.103                 0.897 \n 7 Non diabetic Non diabetic        0.237                 0.763 \n 8 Diabetic     Non diabetic        0.270                 0.730 \n 9 Non diabetic Non diabetic        0.0484                0.952 \n10 Non diabetic Non diabetic        0.0326                0.967 \n# ... with 4,490 more rows\n```\n:::\n:::\n\n\nThe printed predicted of the random forest looks complelling, let’s evaluate its metrics!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf.result %>% \n  conf_mat(truth = diabetic, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              Truth\nPrediction     Diabetic Non diabetic\n  Diabetic         1368           99\n  Non diabetic      186         2847\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf.result %>% \n  conf_mat(truth = diabetic, estimate = .pred_class) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\nWe notice that there a considerable increase in the number of True Positives and True Negatives, which is a step in the right direction. Let’s take a look at other evaluation metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf.result %>% \n  accuracy(truth = diabetic, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.937\n```\n:::\n:::\n\n\nThere is considerable improvement of the accuracy from .75 to around 0.93. The high accuracy of the random forest is also clearly visible in ROC curve (@fig-roc-rf) with considervable high value of area under the curve (AUC).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroc.values = rf.result %>% \n  roc_auc(truth = diabetic, .pred_Diabetic) %>% \n  pull(.estimate) %>% \n  round(2)\n\nrf.result %>% \n  roc_curve(truth = diabetic, .pred_Diabetic) %>% \n  autoplot()+\n  annotate(geom = \"text\", x = .75, y = .25, label = paste(\"AUC-value = \", roc.values))\n```\n\n::: {.cell-output-display}\n![ROC curve of random forest](index_files/figure-html/fig-roc-rf-1.png){#fig-roc-rf width=672}\n:::\n:::\n\n\n@fig-vip is a Variable Importance Plot (VIP) that illustrates importance of each predictor variables used to predict the diabetic outcome  in a random forest model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load vip\nlibrary(vip)\n\n# Extract the fitted model from the workflow\nrf_wf_fit %>% \n  extract_fit_parsnip() %>% \n# Make VIP plot\n  vip()\n```\n\n::: {.cell-output-display}\n![Model-specific VIPs of tree-based model random forest](index_files/figure-html/fig-vip-1.png){#fig-vip width=672}\n:::\n:::\n\n\n\n## Summary\nWe notice that random forest has high predictive power compared to the logistic regression model and hence you can choose the model that give you high accuracy in prediction. The random forest lines of code is bunded in single  chunk;\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## spliting\nmy.split = diabetes.tidy %>% \n  initial_split(prop = .8)\n## test set\nmy.test = my.split %>%  testing()\n## train set\nmy.train = my.split %>% training()\n\n# spefiy the model\nmy.fit  = rand_forest() %>% \n  set_engine(engine = \"ranger\") %>% \n  set_mode(mode = \"classification\") %>% \n  # fit the model\n  fit(diabetic ~ ., data = my.train)\n\n# test the model\nmy.prediction = my.fit %>% \n  predict(new_data = my.test)\n\nmy.prediction.prob  =  my.fit %>% \n  predict(new_data = my.test, type = \"prob\")\n\nmy.prediction =  my.prediction %>% \n  bind_cols(my.prediction.prob)\n\nmy.result = my.test %>% \n  select(diabetic) %>% \n  bind_cols(my.prediction)\n\n# validate the model\n\nmy.result %>% \n  conf_mat(truth = diabetic, estimate = .pred_class)\n\nmy.result %>% \n  accuracy(truth = diabetic, estimate = .pred_class)\n\n# Combine metrics and evaluate them all at once\neval_metrics <- \n  metric_set(ppv, recall, accuracy, f_meas)\n\n\neval_metrics(\n  data = my.result, \n  truth = diabetic, \n  estimate = .pred_class\n  )\n\n## plotting\n\nmy.result %>% \n  roc_curve(truth = diabetic, .pred_Diabetic) %>% \n  autoplot()\n\nmy.result %>% \n  roc_auc(truth = diabetic, .pred_Diabetic)\n```\n:::\n\n\n\n## Cited Materials\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}