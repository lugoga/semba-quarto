my.prediction = my.fit %>%
predict(new_data = my.test)
my.prediction = my.fit %>%
predict(new_data = diabetes_test)
my.prediction
my.prediction = my.fit %>%
predict(new_data = diabetes_test)
my.prediction.prob  =  my.fit %>%
predict(new_data = diabetes_test, type = "prob")
my.prediction =  my.prediction %>%
bind_cols(my.prediction.prob)
my.result = diabetes_test %>%
select(diabetic) %>%
bind_cols(my.prediction)
my.result
my.result
my.result %>%
conf_mat(truth = diabetic, estimate = .pred_class)
my.result %>%
conf_mat(truth = diabetic, estimate = .pred_class) %>%
autoplot()
my.result %>%
accuracy(truth = diabetic, estimate = .pred_class)
# Combine metrics and evaluate them all at once
eval_metrics <-
metric_set(ppv, recall, accuracy, f_meas)
eval_metrics(
data = my.result,
truth = diabetic,
estimate = .pred_class
)
my.result %>%
accuracy(truth = diabetic, estimate = .pred_class)
## plotting
my.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()
my.result %>%
roc_auc(truth = diabetic, .pred_Diabetic)
#| label: fig-roc-rf
#| fig-cap: ROC curve of random forest
my.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()
my.result %>%
roc_auc(truth = diabetic, .pred_Diabetic)
my.result %>%
roc_auc(truth = diabetic, .pred_Diabetic) %>%
pull(.estimate)
my.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()+
annotate(geom = "text", x = ..75, y = .25, label = my.result %>%
roc_auc(truth = diabetic, .pred_Diabetic) %>%
pull(.estimate))
my.result %>%
roc_auc(truth = diabetic, .pred_Diabetic) %>%
pull(.estimate)
roc.values = my.result %>%
roc_auc(truth = diabetic, .pred_Diabetic) %>%
pull(.estimate)
my.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()+
annotate(geom = "text", x = ..75, y = .25, label = roc.values)
my.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()+
annotate(geom = "text", x = ..75, y = .25, label = 2)
my.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()+
annotate(geom = "text", x = .75, y = .25, label = 2)
my.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()+
annotate(geom = "text", x = .75, y = .25, label = roc.values)
roc.values = my.result %>%
roc_auc(truth = diabetic, .pred_Diabetic) %>%
pull(.estimate) %>%
round(2)
my.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()+
annotate(geom = "text", x = .75, y = .25, label = roc.values)
my.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()+
annotate(geom = "text", x = .75, y = .25, label = paste("ROC-value = ", roc.values))
# Load vip
library(vip)
install.packages("vip")
rf_fit
# spefiy the model
rf.fit  = rand_forest() %>%
set_engine(engine = "ranger") %>%
set_mode(mode = "classification") %>%
# fit the model
fit(diabetic ~ ., data = diabetes_train)
rf.prediction = rf.fit %>%
predict(new_data = diabetes_test)
rf.prediction.prob  =  rf.fit %>%
predict(new_data = diabetes_test, type = "prob")
rf.prediction =  rf.prediction %>%
bind_cols(rf.prediction.prob)
rf.result = diabetes_test %>%
select(diabetic) %>%
bind_cols(rf.prediction)
rf.result
rf.result %>%
conf_mat(truth = diabetic, estimate = .pred_class)
rf.result %>%
conf_mat(truth = diabetic, estimate = .pred_class) %>%
autoplot()
rf.result %>%
accuracy(truth = diabetic, estimate = .pred_class)
#| label: fig-roc-rf
#| fig-cap: ROC curve of random forest
roc.values = rf.result %>%
roc_auc(truth = diabetic, .pred_Diabetic) %>%
pull(.estimate) %>%
round(2)
rf.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()+
annotate(geom = "text", x = .75, y = .25, label = paste("AUC-value = ", roc.values))
# Load vip
library(vip)
# Extract the fitted model from the workflow
rf_fit %>%
extract_fit_parsnip() %>%
# Make VIP plot
vip()
rf.fit
# Extract the fitted model from the workflow
rf.fit %>%
extract_fit_parsnip() %>%
# Make VIP plot
vip()
diabetes_train
# Preprocess the data for modelling
diabetes_recipe <- recipe(diabetic ~ ., data = diabetes_train) %>%
step_mutate(age = factor(age)) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(age)
diabetes_recipe
# Build a random forest model specification
rf_spec <- rand_forest() %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification")
# specify a random forest model specification
rf_spec <- rand_forest() %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification")
# Bundle recipe and model spec into a workflow
rf_wf <- workflow() %>%
add_recipe(diabetes_recipe) %>%
add_model(rf_spec)
# Fit a model
rf_wf_fit <- rf_wf %>%
fit(data = diabetes_train)
rf_wf_fit
rf.fit
rf_wf_fit
rf.prediction = rf_wf_fit %>%
predict(new_data = diabetes_test)
rf.prediction.prob  =  rf_wf_fit %>%
predict(new_data = diabetes_test, type = "prob")
rf.prediction =  rf.prediction %>%
bind_cols(rf.prediction.prob)
rf.prediction
rf.result = diabetes_test %>%
select(diabetic) %>%
bind_cols(rf.prediction)
rf.result
rf.result %>%
conf_mat(truth = diabetic, estimate = .pred_class)
rf.result %>%
conf_mat(truth = diabetic, estimate = .pred_class) %>%
autoplot()
rf.result %>%
accuracy(truth = diabetic, estimate = .pred_class)
#| label: fig-roc-rf
#| fig-cap: ROC curve of random forest
roc.values = rf.result %>%
roc_auc(truth = diabetic, .pred_Diabetic) %>%
pull(.estimate) %>%
round(2)
rf.result %>%
roc_curve(truth = diabetic, .pred_Diabetic) %>%
autoplot()+
annotate(geom = "text", x = .75, y = .25, label = paste("AUC-value = ", roc.values))
# Load vip
library(vip)
# Extract the fitted model from the workflow
rf_wf_fit %>%
extract_fit_parsnip() %>%
# Make VIP plot
vip()
diabetes_recipe
require(tidymodels)
require(tidyverse)
peng = palmerpenguins::penguins
peng
peng = palmerpenguins::penguins %>%
select(-island, -year)
peng
peng %>%
initial_split(prop = .2)
split = peng %>%
initial_split(prop = .2)
train = split %>% training()
test = split %>% testing()
fit.reg = logistic_reg() %>%
set_engine(engine = "glm") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
fit.reg
fit.reg %>%
predict(new_data = test)
split = peng %>%
filter(!is.na(species)) %>%
initial_split(prop = .2)
split
peng
peng %>%
filter(!is.na(species))
split = peng %>%
filter(!is.na(sex)) %>%
initial_split(prop = .2)
peng %>%
filter(!is.na(sex))
split = peng %>%
filter(!is.na(sex)) %>%
initial_split(prop = .2)
train = split %>% training()
test = split %>% testing()
fit.reg = logistic_reg() %>%
set_engine(engine = "glm") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
fit.reg %>%
predict(new_data = test)
preds = fit.reg %>%
predict(new_data = test)
preds
preds1 = fit.reg %>%
predict(new_data = test, type = "prob")
preds1
preds = preds %>% bind_cols(preds1)
preds
preds = test %>% bind_cols(preds,preds1)
preds
preds = test %>%
select(species) %>%
bind_cols(preds,preds1)
preds
test
fit.reg = logistic_reg() %>%
set_engine(engine = "glm") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
preds = fit.reg %>%
predict(new_data = test)
preds1 = fit.reg %>%
predict(new_data = test, type = "prob")
preds = test %>%
select(species) %>%
bind_cols(preds,preds1)
preds
preds %>%
accuracy(truth = species, estimate = .pred_class)
fit.reg = rand_forest() %>%
set_engine(engine = "ranger") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
preds = fit.reg %>%
predict(new_data = test)
preds1 = fit.reg %>%
predict(new_data = test, type = "prob")
preds = test %>%
select(species) %>%
bind_cols(preds,preds1)
preds %>%
accuracy(truth = species, estimate = .pred_class)
preds %>%
conf_mat(truth = species, estimate = .pred_class)
preds %>%
conf_mat(truth = species, estimate = .pred_class) %>%
autoplot()
preds
preds %>%
roc_curve(truth = species, .pred_Adelie)
preds
preds %>%
roc_curve(truth = species, .pred_Adelie)
preds
preds %>%
roc_curve(truth = species, .pred_Adelie)
preds %>%
roc_curve(truth = species, .pred_Adelie)+
autoplot()
preds
preds %>%
conf_mat(truth = species, estimate = .pred_class) %>%
autoplot()
preds %>%
roc_curve(truth = species, .pred_Adelie)+
autoplot()
preds
preds %>%
accuracy(truth = species, estimate = .pred_class)
fit.reg = rand_forest() %>%
set_engine(engine = "ranger") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
preds = fit.reg %>%
predict(new_data = test)
preds1 = fit.reg %>%
predict(new_data = test, type = "prob")
preds = test %>%
select(species) %>%
bind_cols(preds,preds1)
preds %>%
accuracy(truth = species, estimate = .pred_class)
preds %>%
conf_mat(truth = species, estimate = .pred_class) %>%
autoplot()
preds %>%
roc_curve(truth = species, .pred_Adelie)+
autoplot()
fit.reg %>%
predict(new_data = test %>% slice(25))
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(25))
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(25))
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(85))
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(5))
test %>% select(-species) %>% slice(5)
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(62))
test
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(221))
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(221))
fit.reg = rand_forest() %>%
set_engine(engine = "ranger") %>%
set_mode(mode = "classification") %>%
fit(sex  ~ ., data = train)
preds = fit.reg %>%
predict(new_data = test)
preds1 = fit.reg %>%
predict(new_data = test, type = "prob")
preds = test %>%
select(species) %>%
bind_cols(preds,preds1)
preds %>%
accuracy(truth = species, estimate = .pred_class)
preds %>%
accuracy(truth = sex, estimate = .pred_class)
preds = test %>%
select(sex) %>%
bind_cols(preds,preds1)
preds %>%
accuracy(truth = sex, estimate = .pred_class)
my.predictor = c("species", "sex")
check = my.predictor[1]
fit.reg = rand_forest() %>%
set_engine(engine = "ranger") %>%
set_mode(mode = "classification") %>%
fit(check  ~ ., data = train)
check
fit.reg = rand_forest() %>%
set_engine(engine = "ranger") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
preds = fit.reg %>%
predict(new_data = test)
preds1 = fit.reg %>%
predict(new_data = test, type = "prob")
preds = test %>%
select(species) %>%
bind_cols(preds,preds1)
preds %>%
accuracy(truth = species, estimate = .pred_class)
preds %>%
conf_mat(truth = species, estimate = .pred_class) %>%
autoplot()
preds %>%
roc_curve(truth = species, .pred_Adelie)+
autoplot()
preds %>%
conf_mat(truth = species, estimate = .pred_class) %>%
autoplot()
preds %>%
accuracy(truth = species, estimate = .pred_class)
preds %>%
roc_curve(truth = species, .pred_Adelie)
preds
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo)
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) +
autoplot()
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo)
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()+
preds %>%
gain_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()+
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(221))
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()+
preds %>%
gain_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
preds %>%
gain_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(221))
fit.reg = rand_forest() %>%
set_engine(engine = "ranger") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
preds = fit.reg %>%
predict(new_data = test)
preds1 = fit.reg %>%
predict(new_data = test, type = "prob")
preds = test %>%
select(species) %>%
bind_cols(preds,preds1)
preds %>%
accuracy(truth = species, estimate = .pred_class)
preds %>%
conf_mat(truth = species, estimate = .pred_class) %>%
autoplot()
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
preds %>%
gain_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(221))
fit.reg = logistic_reg() %>%
set_engine(engine = "glm") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
preds = fit.reg %>%
predict(new_data = test)
preds1 = fit.reg %>%
predict(new_data = test, type = "prob")
preds = test %>%
select(species) %>%
bind_cols(preds,preds1)
preds %>%
accuracy(truth = species, estimate = .pred_class)
preds %>%
conf_mat(truth = species, estimate = .pred_class) %>%
autoplot()
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
preds %>%
gain_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
preds
fit.reg = rand_lforest() %>%
set_engine(engine = "ranger") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
fit.reg = rand_forest() %>%
set_engine(engine = "ranger") %>%
set_mode(mode = "classification") %>%
fit(species  ~ ., data = train)
preds = fit.reg %>%
predict(new_data = test)
preds1 = fit.reg %>%
predict(new_data = test, type = "prob")
preds = test %>%
select(species) %>%
bind_cols(preds,preds1)
preds %>%
accuracy(truth = species, estimate = .pred_class)
preds %>%
conf_mat(truth = species, estimate = .pred_class) %>%
autoplot()
preds %>%
roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
preds %>%
gain_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) %>%
autoplot()
fit.reg %>%
predict(new_data = test %>% select(-species) %>% slice(221))
citation("stars")
citation("tidyterra")
