theme_bw()+
theme(strip.background = element_rect(fill = "white"))
ggplot()+
geom_spatraster(data = aa.values, maxcell = 50)+
geom_spatraster_contour(data = aa.values)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
ggplot()+
geom_spatraster(data = aa.values, maxcell = 5000)+
geom_spatraster_contour(data = aa.values)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
ggplot()+
geom_spatraster(data = aa.values, maxcell = 2000)+
geom_spatraster_contour(data = aa.values)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
aa.values
ggplot()+
geom_spatraster(data = aa.values, maxcell = 000)+
geom_spatraster_contour(data = aa.values)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
ggplot()+
geom_spatraster(data = aa.values, maxcell = 100)+
geom_spatraster_contour(data = aa.values)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
ggplot()+
geom_spatraster(data = aa.values, maxcell = 500)+
geom_spatraster_contour(data = aa.values)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
latRange
lonLength = chl %>% filter(time == "2021-12-31") %>% pull(longitude)
lonLength
latLength = chl %>% filter(time == "2021-12-31") %>% pull(latitude) %>% length()
latLength
lonLength = chl %>% filter(time == "2021-12-31") %>% distinct(longitude) %>% pull(longitude) %>% length()
lonLength
latLength = chl %>% filter(time == "2021-12-31") %>% distinct(latitu) %>% pull(latitude) %>% length()
latLength = chl %>% filter(time == "2021-12-31") %>% distinct(latitude) %>% pull(latitude) %>% length()
latLength
aa = matrix(nrow = lonLength, ncol = latLength) %>%
terra::rast()
aa
latRange = chl %>% filter(time == "2021-12-31") %>%
select(-time) %$% range(latitude)
latLength = chl %>% filter(time == "2021-12-31") %>% distinct(latitude) %>% pull(latitude) %>% length()
lonRange = chl %>% filter(time == "2021-12-31") %>%
select(-time) %$% range(longitude)
lonLength = chl %>% filter(time == "2021-12-31") %>% distinct(longitude) %>% pull(longitude) %>% length()
zvalue = chl %>%
filter(time == "2021-12-31") %>%
pull(chlorophyll)
aa = matrix(nrow = lonLength, ncol = latLength) %>%
terra::rast()
new_ext = terra::ext(lonRange[1],lonRange[2],latRange[1], latRange[2])
terra::ext(aa) = new_ext
aa.values = terra::setValues(x = aa, values = zvalue)
ggplot()+
geom_spatraster(data = aa.values, maxcell = 500)+
geom_spatraster_contour(data = aa.values)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
require(magrittr)
require(terra)
require(tidyterra)
require(tidyverse)
chl = rerddap::griddap(
x = "erdMH1chla8day",
longitude = c(38, 39.5),
latitude = c(-6.5,-5.0),
time = c("2022-01-01", "2022-01-31"),
fmt = "csv") %>%
dplyr::as_tibble() %>%
dplyr::mutate(time = lubridate::as_date(time))
chl
chl
chl %>%
filter(time == "2021-12-31") %>%
select(-time) %>%
raster::rasterFromXYZ()
chl %>%
filter(time == "2021-12-31") %>%
select(-time) %>%
terra::rast()
chl_rast = matrix(nrow = lonLength, ncol = latLength) %>%
terra::rast()
chl_rast
new_ext = terra::ext(lonRange[1],lonRange[2],latRange[1], latRange[2])
terra::ext(chl_rast) = new_ext
chl_rast = terra::setValues(x = chl_rast, values = zvalue)
chl_rast
chl_rast = matrix(nrow = lonLength, ncol = latLength) %>%
terra::rast()
chl_rast
terra::ext(chl_rast) = new_ext
chl_rast
chl_rast
0.04054054*110
chl_rast = terra::setValues(x = chl_rast, values = zvalue)
chl_rast
chl %>%
filter(time == "2021-12-31") %>%
select(-time) %>%
terra::as.raster()
chl %>%
filter(time == "2021-12-31") %>%
select(-time)
chl %>%
filter(time == "2021-12-31") %>%
select(-time) %>%
as.data.frame()
chl %>%
filter(time == "2021-12-31") %>%
select(-time) %>%
as.data.frame() %>%
terra::as.raster()
chl %>%
filter(time == "2021-12-31") %>%
select(-time) %>%
# as.data.frame() %>%
terra::as.raster()
chl %>%
filter(time == "2021-12-31") %>%
select(-time) %>%
as_tibble() %>%
terra::as.raster()
chl %>%
filter(time == "2021-12-31") %>%
select(-time) %>%
terra::rast()
ggplot()+
geom_spatraster(data = chl_rast, maxcell = 2000)+
geom_spatraster_contour(data = chl_rast)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
ggplot()+
geom_spatraster(data = chl_rast, maxcell = 2000)+
geom_spatraster_contour(data = chl_rast, breaks = 1)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
ggplot()+
geom_spatraster(data = chl_rast, maxcell = 2000)+
geom_spatraster_contour(data = chl_rast, breaks = .5)+
ggspatial::layer_spatial(tz, fill = "#84837a", color = "black", linewidth = .5)+
scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::log10_trans(),
name = expression(Chl-a~(mg^{-3})))+
metR::scale_x_longitude(ticks = .3)+
metR::scale_y_latitude(ticks = .3) +
coord_sf(xlim = c(38.7,39.4), ylim = c(-6.45,-5.5))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))
chl_rast %>%
autop
chl_rast %>%
autop
chl_rast %>%
autoplot()
chl_rast %>%
terra::autoplot()
chl_rast %>%
tidyterra::auto
chl_rast %>%
tidyterra::auto
chl_rast %>%
tidyterra::auto
chl_rast %>%
tidyterra::autoplot()
require(sf)
#| echo: false
tz = sf::st_read("tz.gpkg", quiet = TRUE)
#| echo: false
tz = sf::st_read("tz.gpkg", quiet = TRUE)
require(xkcd)
library("RXKCD")
significant <- getXKCD(882, display=FALSE)
---
title: "The Skill Gap in Data Science"
author:
- name: Masumbuko Semba
url: https://semba.netlify.app
orcid: 0000-0002-5002-9747
affiliation: Nelson Mandela African Institution of Science and Technology
affiliation-url: https://semba.netlify.app/
date: "2023-05-01"
date-modified: "2023-05-03"
categories: [R, Python, Data, Programming]
tags:
- Gap
- Data science
- University
- Blogs
- Masumbuko Semba
image: "chatgpt.jpg"
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
bibliography: ../blog.bib
csl:  ../elsevier.csl
execute:
warning: false
fig-width: 7
fig-height: 5
code-line-numbers: true
---
significant <- getXKCD(882, display=FALSE)
significant <- getXKCD(882, display=T)
getXKCD(1882, display=T)
searchXKCD(which="data science")
searchXKCD(which="education")
#| label: tbl-tab1
#| tbl-cap: A sample of drifter dataset of the WIO region
#|
load("drifter_split.RData")
drifter.split%>%
select(-c(drogue, season, sst)) %>%
sample_n(12) %>%
knitr::kable(format = "html",caption = "A sample of drifter dataset", digits = 2, align = "c")%>%
kableExtra::column_spec(column = 1:9, width = "3cm")%>%
kableExtra::add_header_above(c("", "Location" = 2, "Date Records" = 4,  "Current" = 2))
require(metR)
require(tidyverse)
require(lubridate)
require(oce)
require(sf)
require(patchwork)
world = spData::world
wio = world |>
st_crop(xmin =35 , ymin = -15, xmax = 50, ymax = -2)
#| label: tbl-tab1
#| tbl-cap: A sample of drifter dataset of the WIO region
#|
load("drifter_split.RData")
drifter.split%>%
select(-c(drogue, season, sst)) %>%
sample_n(12) %>%
knitr::kable(format = "html",caption = "A sample of drifter dataset", digits = 2, align = "c")%>%
kableExtra::column_spec(column = 1:9, width = "3cm")%>%
kableExtra::add_header_above(c("", "Location" = 2, "Date Records" = 4,  "Current" = 2))
## convert drifter observation into simple features
drifter.split.sf = drifter.split %>%
st_as_sf(coords = c("lon", "lat")) %>%
st_set_crs(4326)
#| label: fig-fig1
#| fig-cap: The distribution of drifter observation within the area
ggplot() +
geom_point(data = drifter.split %>% filter(season == "SE") %>%
sample_frac(.05), aes(x = lon, y = lat))+
geom_sf(data = wio, fill = "lightgrey", col = "black")+
coord_sf(ylim = c(-12.5,-3), xlim = c(36, 48))+
theme_bw()+
theme(axis.text = element_text(size = 12, colour = 1))+
labs(x = "", y = "")
## divide the tropical indian ocean region into grids
drifter.grid = drifter.split.sf %>%
st_make_grid(n = c(40,30))%>%
st_sf()
#| label: fig-fig2
#| fig-cap: Gridded area to fill drifter observations
##
ggplot()+geom_sf(data = drifter.grid)+
geom_sf(data = wio,fill = "lightgrey", col = "black")+
coord_sf(ylim = c(-12.5,-4.5), xlim = c(36, 48))+
theme_bw()+
theme(axis.text = element_text(size = 12, colour = 1))
drifter.split.sf.ne = drifter.split.sf%>% filter(season =="NE")
drifter.gridded = drifter.grid %>%
mutate(id = 1:n(),
contained = lapply(st_contains(st_sf(geometry),drifter.split.sf.ne),identity),
obs = sapply(contained, length),
u = sapply(contained, function(x) {median(drifter.split.sf.ne[x,]$u, na.rm = TRUE)}),
v = sapply(contained, function(x) {median(drifter.split.sf.ne[x,]$v, na.rm = TRUE)}))
drifter.gridded = drifter.gridded %>%
select(obs, u, v) %>%
na.omit()
coordinates = drifter.gridded %>%
st_centroid() %>%
st_coordinates() %>%
as_tibble() %>% rename(x = X, y = Y)
st_geometry(drifter.gridded) = NULL
current.gridded.ne = coordinates %>%
bind_cols(drifter.gridded)%>%
mutate(season = "NE")
drifter.split.sf.se = drifter.split.sf%>% filter(season=="SE")
drifter.gridded = drifter.grid %>%
mutate(id = 1:n(), contained = lapply(st_contains(st_sf(geometry),drifter.split.sf.se),identity),
obs = sapply(contained, length),
u = sapply(contained, function(x) {median(drifter.split.sf.se[x,]$u, na.rm = TRUE)}),
v = sapply(contained, function(x) {median(drifter.split.sf.se[x,]$v, na.rm = TRUE)}))
drifter.gridded = drifter.gridded %>%
select(obs, u, v) %>%
na.omit()
## obtain the centroid coordinates from the grid as table
coordinates = drifter.gridded %>%
st_centroid() %>%
st_coordinates() %>%
as_tibble() %>%
rename(x = X, y = Y)
## remove the geometry from the simple feature of gridded drifter dataset
st_geometry(drifter.gridded) = NULL
## stitch together the extracted coordinates and drifter information int a single table for SE monsoon season
current.gridded.se = coordinates %>%
bind_cols(drifter.gridded) %>%
mutate(season = "SE")
## bind the gridded table for SE and NE
## Note that similar NE follow similar procedure, hence not shown in the post
drifter.current.gridded = current.gridded.ne %>%
bind_rows(current.gridded.se)
## select grids for SE season only
drf.se = drifter.current.gridded %>%
filter(season == "SE")
## interpolate the U component
u.se = interpBarnes(x = drf.se$x, y = drf.se$y, z = drf.se$u)
## obtain dimension that determine the width (ncol) and length (nrow) for tranforming wide into long format table
dimension = data.frame(lon = u.se$xg, u.se$zg) %>% dim()
## make a U component data table from interpolated matrix
u.tb = data.frame(lon = u.se$xg,
u.se$zg) %>%
gather(key = "lata", value = "u", 2:dimension[2]) %>%
mutate(lat = rep(u.se$yg, each = dimension[1])) %>%
select(lon,lat, u) %>% as.tibble()
## interpolate the V component
v.se = interpBarnes(x = drf.se$x,
y = drf.se$y,
z = drf.se$v)
## make the V component data table from interpolated matrix
v.tb = data.frame(lon = v.se$xg, v.se$zg) %>%
gather(key = "lata", value = "v", 2:dimension[2]) %>%
mutate(lat = rep(v.se$yg, each = dimension[1])) %>%
select(lon,lat, v) %>%
as.tibble()
## stitch now the V component intot the U data table and compute the velocity
uv.se = u.tb %>%
bind_cols(v.tb %>% select(v)) %>%
mutate(vel = sqrt(u^2+v^2))
#| label: fig-segment
#| fig-cap: Vector field of speed and direction of surface current
ggplot() +
geom_raster(data = uv.se, aes(x = lon, y = lat, fill = vel), interpolate = TRUE)+
geom_segment(data = uv.se, aes(x = lon, xend = lon + u/1.2, y = lat, yend = lat+v/1.2),
arrow = arrow(angle = 20, length = unit(.2, "cm"), type = "open"))+
geom_sf(data = wio,fill = "lightgrey", col = "black")+
coord_sf(ylim = c(-12.5,-4.5), xlim = c(38, 48))+
scale_fill_gradientn(name = "Current",colours = oceColorsVelocity(120),
limits = c(0,1.6), breaks = seq(0.1,1.6,.3),
guide = guide_colorbar(barwidth = .8, barheight = 15,
title = expression(Current~speed~(ms^{-1})),
title.position = "right", title.hjust = .5,
title.theme = element_text(angle = 90)))+
theme_bw()+
theme(legend.position = "right",
legend.key.height = unit(1.4, "cm"),
legend.background = element_blank(),
axis.text = element_text(size = 12, colour = 1))+
labs(x = "", y = "")
#| label: fig-streamline
#| fig-cap: Streamline of surface current superimposed on the current velocity raster
ggplot() +
metR::geom_contour_fill(data = uv.se, aes(x = lon, y = lat, z = vel),
na.fill = TRUE, bins = 70) +
metR::geom_streamline(data = uv.se,
aes(x = lon, y = lat, dx = u, dy = v),
L = .9, res = 4, n = 40, jitter = 4)+
geom_sf(data = wio,fill = "lightgrey", col = "black")+
coord_sf(ylim = c(-12.5,-4.5), xlim = c(38, 48))+
scale_fill_gradientn(name = "Current",colours = oceColorsVelocity(120),
limits = c(0,1.6), breaks = seq(0.1,1.6,.3),
guide = guide_colorbar(barwidth = .8, barheight = 15,
title = expression(Current~speed~(ms^{-1})),
title.position = "right", title.hjust = .5,
title.theme = element_text(angle = 90)))+
theme_bw()+
theme(legend.position = "right",
legend.key.height = unit(1.4, "cm"),
legend.background = element_blank(),
axis.text = element_text(size = 12, colour = 1))+
labs(x = "", y = "")
#| label: fig-massless
#| fig-cap: streamlines of surface current flow
#|
ggplot()+
metR::geom_streamline(data = uv.se,
aes(x = lon, y = lat, dx = u, dy = v,
color = sqrt(..dx..^2 + ..dy..^2),
alpha = ..step..),
L = 2, res = 2, n = 40,
arrow = NULL, lineend = "round")+
geom_sf(data = wio,fill = "lightgrey", col = "black")+
coord_sf(ylim = c(-12.5,-4.5), xlim = c(38, 48))+
scale_color_viridis_c(
guide = guide_colorbar(barwidth = .8, barheight = 15,
title = expression(Current~speed~(ms^{-1})),
title.position = "right", title.hjust = .5,
title.theme = element_text(angle = 90)))+
scale_size(range = c(0.2, 1.5), guide = "none") +
scale_alpha(guide = "none") +
theme_bw()+
theme(legend.position = "right",
legend.key.height = unit(1.4, "cm"),
legend.background = element_blank(),
axis.text = element_text(size = 12, colour = 1))+
labs(x = "", y = "")
require(terra)
require(tidyterra)
require(tidyverse)
require(sf)
require(magrittr)
multi_rast = terra::rast(system.file("raster/landsat.tif", package = "spDataLarge"))
install.packages("spDataLarge")
install.packages("spDataLarge", repos = "https://geocompr.r-universe.dev")
require(terra)
require(tidyterra)
require(tidyverse)
require(sf)
require(magrittr)
multi_rast = terra::rast(system.file("raster/landsat.tif", package = "spDataLarge"))
multi_rast
multi_rast = multi_rast %>%
rename(
blue = landsat_1,
green = landsat_2,
red = landsat_3,
nir = landsat_4
)
multi_rast
multi_rast = multi_rast %>%
tidyterra::mutate(ndvi = (nir - red)/(nir + red))
multi_rast
#| label: fig-ndvi
#| fig-cap: Computed NDVI with color gradient where green color indicate a greenish land cover
#| crop: false
ggplot()+
tidyterra::geom_spatraster(data = multi_rast[[5]])+
scale_fill_gradientn(colours = hcl.colors(n = 5, palette = "Red-Green"),
guide = guide_colorbar(reverse = TRUE, title = "NDVI")) +
theme_minimal()
current = wior::get_oscar(lon.min = 35, lon.max = 50, lat.min = -5, lat.max = 5, t1 = "2022-07-01", t2 = "2022-07-20")
library("RXKCD")
significant <- getXKCD(882, display=TRUE)
library("RXKCD")
searchXKCD(which="lecture")
getXKCD(1950, html = F)
searchXKCD(which="information")
getXKCD(1191, html = F)
getXKCD(1191, html = F)
getXKCD(1191, html = T)
getXKCD(1273, html = F)
getXKCD(1191, html = F)
getXKCD(1227, html = F)
searchXKCD(which="strategy")
getXKCD(which = 1445, html = F)
getXKCD(which = 1124, html = F)
getXKCD(which = 141, html = F)
getXKCD(which = 1124, html = F)
getXKCD(1950, html = F)
searchXKCD(which="information")
getXKCD(783, html = F)
getXKCD(1191, html = F)
